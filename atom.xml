<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>H&#39;s Blog</title>
  
  <subtitle>心之所向</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hwhjl.com/"/>
  <updated>2020-05-26T06:03:56.945Z</updated>
  <id>http://hwhjl.com/</id>
  
  <author>
    <name>He Jinliang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建FastDFS</title>
    <link href="http://hwhjl.com/2020/05/06/da-jian-fastdfs/"/>
    <id>http://hwhjl.com/2020/05/06/da-jian-fastdfs/</id>
    <published>2020-05-06T05:11:00.000Z</published>
    <updated>2020-05-26T06:03:56.945Z</updated>
    
    <content type="html"><![CDATA[<p>PS：因为近期一直在忙着手中的项目，一边学一边做，也碰到了各种各样的问题，项目中需要用到图片存储，那</p><p>索性就学一个分布式文件系统吧，搭建一个属于自己的图片服务器，历时两天，都是心酸累</p><h1 id="FastDFS介绍"><a href="#FastDFS介绍" class="headerlink" title="FastDFS介绍"></a>FastDFS介绍</h1><ul><li><h5 id="fastDFS-是以C语言开发的一项开源轻量级分布式文件系统，他对文件进行管理，主要功能有：文件存储，文"><a href="#fastDFS-是以C语言开发的一项开源轻量级分布式文件系统，他对文件进行管理，主要功能有：文件存储，文" class="headerlink" title="fastDFS 是以C语言开发的一项开源轻量级分布式文件系统，他对文件进行管理，主要功能有：文件存储，文"></a>fastDFS 是以C语言开发的一项开源轻量级分布式文件系统，他对文件进行管理，主要功能有：文件存储，文</h5><h5 id="件同步，文件访问（文件上传-下载）-特别适合以文件为载体的在线服务，如图片网站，视频网站等"><a href="#件同步，文件访问（文件上传-下载）-特别适合以文件为载体的在线服务，如图片网站，视频网站等" class="headerlink" title="件同步，文件访问（文件上传/下载）,特别适合以文件为载体的在线服务，如图片网站，视频网站等"></a>件同步，文件访问（文件上传/下载）,特别适合以文件为载体的在线服务，如图片网站，视频网站等</h5></li><li><p>分布式文件系统：</p><p> 基于客户端/服务器的文件存储系统</p><p> 对等特性允许一些系统扮演客户端和服务器的双重角色，可供多个用户访问的服务器，比如，用户可以“发</p><p>表”一个允许其他客户机访问的目录，一旦被访问，这个目录对客户机来说就像使用本地驱动器一样</p></li></ul><h2 id="FastDFS由跟踪服务器-Tracker-Server-、存储服务器-Storage-Server-和客户端-Client-构成。"><a href="#FastDFS由跟踪服务器-Tracker-Server-、存储服务器-Storage-Server-和客户端-Client-构成。" class="headerlink" title="FastDFS由跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)构成。"></a>FastDFS由跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)构成。</h2><ul><li><h5 id="Tracker-server-追踪服务器"><a href="#Tracker-server-追踪服务器" class="headerlink" title="Tracker server 追踪服务器"></a>Tracker server 追踪服务器</h5></li></ul><p>追踪服务器负责接收客户端的请求，选择合适的组合storage server ，tracker server 与 storage server之间也会</p><p>用心跳机制来检测对方是否活着。</p><p> Tracker需要管理的信息也都放在内存中，并且里面所有的Tracker都是对等的（每个节点地位相等），很容易扩</p><p>展 ，客户端访问集群的时候会随机分配一个Tracker来和客户端交互。</p><ul><li><h5 id="Storage-server-储存服务器"><a href="#Storage-server-储存服务器" class="headerlink" title="Storage server 储存服务器"></a>Storage server 储存服务器</h5></li></ul><p>实际存储数据，分成若干个组（group），实际traker就是管理的storage中的组，而组内机器中则存储数据，</p><p>group可以隔离不同应用的数据，不同的应用的数据放在不同group里面，</p><ul><li><p>优点：<br> 海量的存储：主从型分布式存储，存储空间方便拓展,</p><p>fastDFS对文件内容做hash处理，避免出现重复文件</p><p> 然后fastDFS结合Nginx集成, 提供网站效率</p></li></ul><h1 id="1-FastDFS安装测试"><a href="#1-FastDFS安装测试" class="headerlink" title="1.FastDFS安装测试"></a>1.FastDFS安装测试</h1><h2 id="1-1安装VMware虚拟机"><a href="#1-1安装VMware虚拟机" class="headerlink" title="1.1安装VMware虚拟机"></a>1.1安装VMware虚拟机</h2><p>因为是入门学习，我就把服务器搭建在了本机上，本人用的是CentOS7，如果搭建虚拟机本文不赘述</p><h2 id="1-2FastDFS–tracker安装"><a href="#1-2FastDFS–tracker安装" class="headerlink" title="1.2FastDFS–tracker安装"></a>1.2FastDFS–tracker安装</h2><p>因为快速体验，trancker和storage装在了同一台服务器上（192.168.101.3）</p><h3 id="1-2-1下载"><a href="#1-2-1下载" class="headerlink" title="1.2.1下载"></a>1.2.1下载</h3><p>tracker和storage使用相同的安装包</p><p>FastDFS_v5.05.tar.gz  </p><h3 id="1-2-2安装环境"><a href="#1-2-2安装环境" class="headerlink" title="1.2.2安装环境"></a>1.2.2安装环境</h3><p>安装 FastDFS 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果</p><p>没有 gcc 环境，需要安装 gcc：</p><p><code>yum install gcc-c++</code></p><h3 id="1-2-3安装libevent"><a href="#1-2-3安装libevent" class="headerlink" title="1.2.3安装libevent"></a>1.2.3安装libevent</h3><p>FastDFS 依赖 libevent 库，需要安装：<br><code>yum -y install libevent</code></p><h3 id="1-2-4安装libfastcommon"><a href="#1-2-4安装libfastcommon" class="headerlink" title="1.2.4安装libfastcommon"></a>1.2.4安装libfastcommon</h3><pre><code>//libfastcommon 是 FastDFS 官方提供的， libfastcommon 包含了 FastDFS 运行所需//要的一些基础库。//将 libfastcommonV1.0.7.tar.gz 拷贝至/usr/local/下cd /usr/local//解压tar -zxvf libfastcommonV1.0.7.tar.gz//进入目录cd libfastcommon-1.0.7//执行编译安装./make.sh./make.sh install  </code></pre><h3 id="1-2-5tracker编译安装"><a href="#1-2-5tracker编译安装" class="headerlink" title="1.2.5tracker编译安装"></a>1.2.5tracker编译安装</h3><pre><code>//将 FastDFS_v5.05.tar.gz 拷贝至/usr/local/下cd /usr/local//解压tar -zxvf FastDFS_v5.05.tar.gz//进入目录cd FastDFS//执行编译安装./make.sh 编译./make.sh install 安装</code></pre><p>安装成功将安装目录下的 conf 下的文件拷贝到/etc/fdfs/下。  </p><p><img src="http://img.hjl1998.cn/20200526133035.png" alt=""></p><h3 id="1-2-6配置"><a href="#1-2-6配置" class="headerlink" title="1.2.6配置"></a>1.2.6配置</h3><p>进入/etc/fdfs 目录  </p><pre><code>//拷贝一份新的 tracker 配置文件：cp tracker.conf.sample tracker.conf//修改 tracker.confvi tracker.conf</code></pre><p>base_path=/home/yuqing/FastDFS</p><p>改为：</p><p>base_path=/home/FastDFS</p><p>配置 http 端口：</p><p>http.server_port=80  </p><h3 id="1-2-7启动"><a href="#1-2-7启动" class="headerlink" title="1.2.7启动"></a>1.2.7启动</h3><pre><code>/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart  </code></pre><h2 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h2><h3 id="1-3-1-安装-libevent"><a href="#1-3-1-安装-libevent" class="headerlink" title="1.3.1 安装 libevent"></a>1.3.1 安装 libevent</h3><p>同 tracker 安装</p><h3 id="1-3-2-安装-libfastcommon"><a href="#1-3-2-安装-libfastcommon" class="headerlink" title="1.3.2 安装 libfastcommon"></a>1.3.2 安装 libfastcommon</h3><p>同 tracker 安装。</p><h3 id="1-3-3-storage-编译安装"><a href="#1-3-3-storage-编译安装" class="headerlink" title="1.3.3 storage 编译安装"></a>1.3.3 storage 编译安装</h3><p>同 tracker 编译安装  </p><h3 id="1-3-4-配置"><a href="#1-3-4-配置" class="headerlink" title="1.3.4 配置"></a>1.3.4 配置</h3><p>进入/etc/fdfs 目录  </p><pre><code>//拷贝一份新的 storage 配置文件：cp storage.conf.sample storage.conf</code></pre><p>修改 storage.conf</p><p>vi storage.conf</p><p>group_name=group1</p><p>base_path=/home/yuqing/FastDFS 改为： base_path=/home/ fastdfs  </p><p>store_path0=/home/yuqing/FastDFS</p><p>改为： store_path0=/home/fastdfs/fdfs_storage</p><p>#如果有多个挂载磁盘则定义多个 store_path，如下</p><p>#store_path1=…..</p><p>#store_path2=……</p><p>tracker_server=192.168.101.3:22122 #配置 tracker 服务器:IP</p><p>#如果有多个则配置多个 tracker</p><p>tracker_server=192.168.101.4:22122</p><p>#配置 http 端口</p><p>http.server_port=80 </p><h3 id="1-3-5启动"><a href="#1-3-5启动" class="headerlink" title="1.3.5启动"></a>1.3.5启动</h3><pre><code>/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart  </code></pre><h3 id="1-3-6查看"><a href="#1-3-6查看" class="headerlink" title="1.3.6查看"></a>1.3.6查看</h3><p>我们可以通过命令来查看tracker和storage是否已经运行</p><pre><code>ps -ef | grep fdfs</code></pre><p><img src="http://img.hjl1998.cn/20200526133939.png" alt=""></p><p>成功运行如上图</p><h2 id="1-4测试"><a href="#1-4测试" class="headerlink" title="1.4测试"></a>1.4测试</h2><p>FastDFS 安装成功可通过/usr/bin/fdfs_test 程序来测试上传、下载等操作。</p><p>修改/etc/fdfs/client.conf</p><p>tracker_server 根据自己部署虚拟机的情况配置 。  </p><pre><code>base_path=/home/fastdfstracker_server=192.168.101.3:22122</code></pre><p>使用格式：</p><pre><code>/usr/bin/fdfs_test 客户端配置文件地址 upload 上传文件</code></pre><p>比如将/home 下的图片上传到 FastDFS 中：</p><pre><code>/usr/bin/fdfs_test /etc/fdfs/client.conf upload /home/dd.png  </code></pre><p><img src="http://img.hjl1998.cn/20200526134203.png" alt=""></p><p>此时表示已经上传成功，我们去到相应目录下</p><p><img src="http://img.hjl1998.cn/20200526134248.png" alt=""></p><p>已经可以看到同名文件</p><h2 id="1-5整合Nginx"><a href="#1-5整合Nginx" class="headerlink" title="1.5整合Nginx"></a>1.5整合Nginx</h2><p>单独安装 nginx 代理服务，它的作用是代理访问 storage 上的文件，实现负载均衡。</p><p>这里使用单机 nginx，也可以使用两台 nginx 组成高可用或者采用 lvs+nginx 访问 Storage 上的 nginx。  </p><h3 id="1-5-1安装nginx"><a href="#1-5-1安装nginx" class="headerlink" title="1.5.1安装nginx"></a>1.5.1安装nginx</h3><h4 id="安装FastDFS-nginx-module"><a href="#安装FastDFS-nginx-module" class="headerlink" title="安装FastDFS-nginx-module"></a>安装FastDFS-nginx-module</h4><p>将 FastDFS-nginx-module_v1.16.tar.gz 传 至 fastDFS 的 storage 服 务 器 的</p><p>usr/local/下，执行如下命令：</p><p><code>cd /usr/local</code></p><p>tar -zxvf FastDFS-nginx-module_v1.16.tar.gz</p><p><code>cd FastDFS-nginx-module/src</code></p><p>修改 config 文件将/usr/local/路径改为/usr/  </p><p>将 FastDFS-nginx-module/src 下的 mod_FastDFS.conf 拷贝至/etc/fdfs/下</p><p><code>cp mod_FastDFS.conf /etc/fdfs/</code></p><p>并修改 mod_FastDFS.conf 的内容：</p><p><code>vi /etc/fdfs/mod_FastDFS.conf</code></p><p>修改内容如下</p><p>base_path=/home/FastDFS  </p><p>tracker_server=192.168.101.3:22122</p><p>tracker_server=192.168.101.4:22122</p><p>url_have_group_name=true #url 中包含 group 名称</p><p>store_path0=/home/fastdfs/fdfs_storage #指定文件存储路径</p><p>#如果有多个</p><p>将 libfdfsclient.so 拷贝至/usr/lib 下</p><p>cp /usr/lib64/libfdfsclient.so /usr/lib/  </p><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><p>将 nginx-1.8.0.tar.gz 拷贝到/usr/local 下</p><p>解压 nginx-1.8.0.tar.gz</p><p>进入 nginx-1.8.0 目录，执行如下配置命令：  </p><pre><code>./configure \--prefix=/usr/local/nginx \--pid-path=/var/run/nginx/nginx.pid \  --lock-path=/var/lock/nginx.lock \--error-log-path=/var/log/nginx/error.log \--http-log-path=/var/log/nginx/access.log \--with-http_gzip_static_module \--http-client-body-temp-path=/var/temp/nginx/client \--http-proxy-temp-path=/var/temp/nginx/proxy \--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \--http-scgi-temp-path=/var/temp/nginx/scgi \--add-module=/usr/local/FastDFS-nginx-module/src</code></pre><p>并进行编译安装</p><p><code>make</code><br><code>make install</code></p><h4 id="nginx添加主机"><a href="#nginx添加主机" class="headerlink" title="nginx添加主机"></a>nginx添加主机</h4><p>在/usr/local/nginx/conf下创建文件nginx-fdfs.conf ，并添加虚拟主机</p><pre><code>server {   listen 80;   server_name 192.168.101.65;   location /group1/M00/{      root /home/FastDFS/fdfs_storage/data;      ngx_FastDFS_module;   }}</code></pre><h4 id="开启nginx"><a href="#开启nginx" class="headerlink" title="开启nginx"></a>开启nginx</h4><p>/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx-fdfs.conf</p><p>注：如果在win机上访问不到nginx，那就是防火墙的问题，可以直接关了，或者开放80端口</p><h2 id="1-6java程序测试"><a href="#1-6java程序测试" class="headerlink" title="1.6java程序测试"></a>1.6java程序测试</h2><h3 id="1-6-1导入依赖"><a href="#1-6-1导入依赖" class="headerlink" title="1.6.1导入依赖"></a>1.6.1导入依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.oschina.zcx7878<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastdfs-client-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.27.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="1-6-2配置文件"><a href="#1-6-2配置文件" class="headerlink" title="1.6.2配置文件"></a>1.6.2配置文件</h3><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">fastdfs.connect_timeout_in_seconds</span> <span class="token punctuation">=</span> <span class="token attr-value">5</span><span class="token attr-name">fastdfs.network_timeout_in_seconds</span> <span class="token punctuation">=</span> <span class="token attr-value">30</span><span class="token attr-name">fastdfs.charset</span> <span class="token punctuation">=</span> <span class="token attr-value">UTF-8</span><span class="token attr-name">fastdfs.tracker_servers</span> <span class="token punctuation">=</span> <span class="token attr-value">192.168.101.3:22122</span></code></pre><h3 id="1-6-3编写测试类"><a href="#1-6-3编写测试类" class="headerlink" title="1.6.3编写测试类"></a>1.6.3编写测试类</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFastDFS</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> MyException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//加载配置文件</span>        ClientGlobal<span class="token punctuation">.</span><span class="token function">initByProperties</span><span class="token punctuation">(</span><span class="token string">"config/application.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//tracker client</span>        TrackerClient trackerClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrackerClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//连接TrackerServer</span>        TrackerServer trackerServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//连接StorageServer</span>        StorageServer storageServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getStoreStorage</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Storage,构造参数trackerServer</span>        StorageClient1 storageClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StorageClient1</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">,</span>storageServer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过storageClient上传文件</span>        <span class="token comment" spellcheck="true">//String local_filename, String file_ext_name, NameValuePair[] meta_list</span>        <span class="token comment" spellcheck="true">/**         * 1.文件路径         * 2.文件名         * 3.文件元信息         */</span>        <span class="token comment" spellcheck="true">//上传文件成功后返回文件ID</span>        String jpgId <span class="token operator">=</span> storageClient<span class="token punctuation">.</span><span class="token function">upload_file1</span><span class="token punctuation">(</span><span class="token string">"e:/dd.jpg"</span><span class="token punctuation">,</span> <span class="token string">"jpg"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jpgId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> MyException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//加载配置文件</span>        ClientGlobal<span class="token punctuation">.</span><span class="token function">initByProperties</span><span class="token punctuation">(</span><span class="token string">"config/application.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//tracker client</span>        TrackerClient trackerClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrackerClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//连接TrackerServer</span>        TrackerServer trackerServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//连接StorageServer</span>        StorageServer storageServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getStoreStorage</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Storage,构造参数trackerServer</span>        StorageClient1 storageClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StorageClient1</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">,</span>storageServer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过storageClient上传文件</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> storageClient<span class="token punctuation">.</span><span class="token function">download_file1</span><span class="token punctuation">(</span><span class="token string">"group1/M00/00/00/wKhlA17MnOqAZzslAAGSwDxUQMY710.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:/ddd.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-6-4测试结果"><a href="#1-6-4测试结果" class="headerlink" title="1.6.4测试结果"></a>1.6.4测试结果</h3><p><img src="http://img.hjl1998.cn/ddd.png" alt=""></p><p>成功获取ID</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>fastDFS入门程序就到这里了，因为是快速上手，只用了一台服务器，如果做集群，tracker和storage应当是分开的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PS：因为近期一直在忙着手中的项目，一边学一边做，也碰到了各种各样的问题，项目中需要用到图片存储，那&lt;/p&gt;
&lt;p&gt;索性就学一个分布式文件系统吧，搭建一个属于自己的图片服务器，历时两天，都是心酸累&lt;/p&gt;
&lt;h1 id=&quot;FastDFS介绍&quot;&gt;&lt;a href=&quot;#FastD
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://hwhjl.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Module build failed Error Node Sass does not yet support your current environment OS X 64-bit...</title>
    <link href="http://hwhjl.com/2020/04/18/module-build-failed-error-node-sass-does-not-yet-support-your-current-environment-os-x-64-bit.../"/>
    <id>http://hwhjl.com/2020/04/18/module-build-failed-error-node-sass-does-not-yet-support-your-current-environment-os-x-64-bit.../</id>
    <published>2020-04-18T04:58:44.000Z</published>
    <updated>2020-05-18T05:34:13.212Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言：最近将node-js升级到最新版以后，运行前端项目报错如下："><a href="#前言：最近将node-js升级到最新版以后，运行前端项目报错如下：" class="headerlink" title="前言：最近将node.js升级到最新版以后，运行前端项目报错如下："></a>前言：最近将node.js升级到最新版以后，运行前端项目报错如下：</h3><pre><code>Module build failed Error Node Sass does not yet support your current environment OS X 64-bit...</code></pre><h3 id="解决方法如下："><a href="#解决方法如下：" class="headerlink" title="解决方法如下："></a>解决方法如下：</h3><pre><code>//将旧版本卸载npm uninstall node-sass -g//安装最新版npm install node-sass -g//单独在出错的module中npm install node-sass --save-devcnpm install node-sass --save-dev （我用的后者）解释：cnpm命令会从淘宝镜像下载相关资源包，--save-dev表示仅保存在当前项目中。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言：最近将node-js升级到最新版以后，运行前端项目报错如下：&quot;&gt;&lt;a href=&quot;#前言：最近将node-js升级到最新版以后，运行前端项目报错如下：&quot; class=&quot;headerlink&quot; title=&quot;前言：最近将node.js升级到最新版以后，运行前端
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://hwhjl.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="杀bug" scheme="http://hwhjl.com/tags/%E6%9D%80bug/"/>
    
  </entry>
  
  <entry>
    <title>SQL优化整理</title>
    <link href="http://hwhjl.com/2020/02/24/sql-you-hua-zheng-li/"/>
    <id>http://hwhjl.com/2020/02/24/sql-you-hua-zheng-li/</id>
    <published>2020-02-24T09:49:55.000Z</published>
    <updated>2020-02-24T09:52:16.671Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不多讲，少侠看剑"><a href="#不多讲，少侠看剑" class="headerlink" title="不多讲，少侠看剑"></a>不多讲，少侠看剑</h1><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>、应尽量避免在 <span class="token keyword">where</span> 子句中使用<span class="token operator">!=</span>或<span class="token operator">&lt;></span>操作符，否则将引擎放弃使用索引而进行全表扫描。<span class="token number">2</span>、对查询进行优化，应尽量避免全表扫描，首先应考虑在 <span class="token keyword">where</span> 及 <span class="token keyword">order</span> <span class="token keyword">by</span> 涉及的列上建立索引。<span class="token number">3</span>、应尽量避免在 <span class="token keyword">where</span> 子句中对字段进行 <span class="token boolean">null</span> 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：<span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num <span class="token operator">is</span> <span class="token boolean">null</span>可以在num上设置默认值<span class="token number">0</span>，确保表中num列没有<span class="token boolean">null</span>值，然后这样查询：<span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token number">4</span>、尽量避免在 <span class="token keyword">where</span> 子句中使用 <span class="token operator">or</span> 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：<span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">or</span> num<span class="token operator">=</span><span class="token number">20</span>可以这样查询：<span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token keyword">union</span> <span class="token keyword">all</span><span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num<span class="token operator">=</span><span class="token number">20</span><span class="token number">5</span>、下面的查询也将导致全表扫描：<span class="token punctuation">(</span>不能前置百分号<span class="token punctuation">)</span><span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> name <span class="token operator">like</span> ‘�<span class="token number">c</span><span class="token operator">%</span>’若要提高效率，可以考虑全文检索。<span class="token number">6</span>、<span class="token operator">in</span> 和 <span class="token operator">not</span> <span class="token operator">in</span> 也要慎用，否则会导致全表扫描，如：<span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num <span class="token operator">in</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>对于连续的数值，能用 <span class="token operator">between</span> 就不要用 <span class="token operator">in</span> 了：<span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num <span class="token operator">between</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">3</span><span class="token number">7</span>、如果在 <span class="token keyword">where</span> 子句中使用参数，也会导致全表扫。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：<span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num<span class="token operator">=</span><span class="token variable">@num</span>可以改为强制查询使用索引：<span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">with</span><span class="token punctuation">(</span><span class="token keyword">index</span><span class="token punctuation">(</span>索引名<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">where</span> num<span class="token operator">=</span><span class="token variable">@num</span><span class="token number">8</span>、应尽量避免在 <span class="token keyword">where</span> 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：<span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num<span class="token operator">/</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">100</span>应改为:<span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> num<span class="token operator">=</span><span class="token number">100</span><span class="token operator">*</span><span class="token number">2</span><span class="token number">9</span>、应尽量避免在<span class="token keyword">where</span>子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> substring<span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">=</span>’<span class="token number">abc</span>’–name以<span class="token number">abc</span>开头的id<span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> datediff<span class="token punctuation">(</span>day<span class="token punctuation">,</span>createdate<span class="token punctuation">,</span>’<span class="token number">2005</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">30</span>′<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span>–’<span class="token number">2005</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">30</span>′生成的id应改为:<span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> name <span class="token operator">like</span> ‘<span class="token number">abc</span><span class="token operator">%</span>’<span class="token keyword">select</span> id <span class="token keyword">from</span> t <span class="token keyword">where</span> createdate<span class="token operator">>=</span>’<span class="token number">2005</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">30</span>′ <span class="token operator">and</span> createdate<span class="token operator">&lt;</span>’<span class="token number">2005</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">1</span>′<span class="token number">10</span>、不要在 <span class="token keyword">where</span> 子句中的“<span class="token operator">=</span>”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。<span class="token number">11</span>、在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使 用，并且应尽可能的让字段顺序与索引顺序相一致。<span class="token number">12</span>、不要写一些没有意义的查询，如需要生成一个空表结构：<span class="token keyword">select</span> col1<span class="token punctuation">,</span>col2 <span class="token keyword">into</span> <span class="token comment" spellcheck="true">#t from t where 1=0</span>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token comment" spellcheck="true">#t(…)</span><span class="token number">13</span>、很多时候用 <span class="token keyword">exists</span> 代替 <span class="token operator">in</span> 是一个好的选择：<span class="token keyword">select</span> num <span class="token keyword">from</span> <span class="token number">a</span> <span class="token keyword">where</span> num <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> num <span class="token keyword">from</span> <span class="token number">b</span><span class="token punctuation">)</span>用下面的语句替换：<span class="token keyword">select</span> num <span class="token keyword">from</span> <span class="token number">a</span> <span class="token keyword">where</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> <span class="token number">b</span> <span class="token keyword">where</span> num<span class="token operator">=</span><span class="token number">a</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token number">14</span>、并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段 sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。<span class="token number">15</span>、索引并不是越多越好，索引固然可以提高相应的 <span class="token keyword">select</span> 的效率，但同时也降低了 <span class="token keyword">insert</span> 及 <span class="token keyword">update</span> 的效率，因为 <span class="token keyword">insert</span> 或 <span class="token keyword">update</span> 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过<span class="token number">6</span>个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。<span class="token number">16</span><span class="token punctuation">.</span>应尽可能的避免更新 <span class="token keyword">clustered</span> 索引数据列，因为 <span class="token keyword">clustered</span> 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 <span class="token keyword">clustered</span> 索引数据列，那么需要考虑是否应将该索引建为 <span class="token keyword">clustered</span> 索引。<span class="token number">17</span>、尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。<span class="token number">18</span>、尽可能的使用 <span class="token keyword">varchar</span><span class="token operator">/</span>nvarchar 代替 char<span class="token operator">/</span><span class="token keyword">nchar</span> ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。<span class="token number">19</span>、任何地方都不要使用 <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t ，用具体的字段列表代替“<span class="token operator">*</span>”，不要返回用不到的任何字段。<span class="token number">20</span>、尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。<span class="token number">21</span>、避免频繁创建和删除临时表，以减少系统表资源的消耗。<span class="token number">22</span>、临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使 用导出表。<span class="token number">23</span>、在新建临时表时，如果一次性插入数据量很大，那么可以使用 <span class="token keyword">select</span> <span class="token keyword">into</span> 代替 <span class="token keyword">create</span> <span class="token keyword">table</span>，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先<span class="token keyword">create</span> <span class="token keyword">table</span>，然后<span class="token keyword">insert</span>。<span class="token number">24</span>、如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 <span class="token keyword">truncate</span> <span class="token keyword">table</span> ，然后 <span class="token keyword">drop</span> <span class="token keyword">table</span> ，这样可以避免系统表的较长时间锁定。<span class="token number">25</span>、尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过<span class="token number">1</span>万行，那么就应该考虑改写。<span class="token number">26</span>、使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。<span class="token number">27</span>、与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。<span class="token number">28</span>、在所有的存储过程和触发器的开始处设置 <span class="token keyword">SET</span> NOCOUNT <span class="token keyword">ON</span> ，在结束时设置 <span class="token keyword">SET</span> NOCOUNT <span class="token keyword">OFF</span> 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。<span class="token number">29</span>、尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。<span class="token number">30</span>、尽量避免大事务操作，提高系统并发能力。</code></pre><p>好好看，好好学，特别是hejinliang</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;不多讲，少侠看剑&quot;&gt;&lt;a href=&quot;#不多讲，少侠看剑&quot; class=&quot;headerlink&quot; title=&quot;不多讲，少侠看剑&quot;&gt;&lt;/a&gt;不多讲，少侠看剑&lt;/h1&gt;&lt;pre class=&quot; language-sql&quot;&gt;&lt;code class=&quot;language-
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://hwhjl.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SQL" scheme="http://hwhjl.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="http://hwhjl.com/2020/01/01/hong-hei-shu-ru-men/"/>
    <id>http://hwhjl.com/2020/01/01/hong-hei-shu-ru-men/</id>
    <published>2020-01-01T07:26:32.000Z</published>
    <updated>2020-01-10T07:57:14.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>红黑树也许是历史上最富盛名的一种平衡二叉树。顾名思义，它和红色和黑色两种颜色有关，但是很多介绍红黑树的材料对于这个数据结构都比较形式化，不过对于其它来说，红黑树确实稍稍复杂。</p><p>下面是《算法导论》对于红黑树的定义：</p><ol><li><p>每个节点或者是红色，或者是黑色</p></li><li><p>根节点是黑色的</p></li><li><p>每一个叶子节点（最后的空节点）是黑色的</p></li><li><p>如果一个节点是红色的，那么它的孩子节点是黑色的</p></li><li><p>从任意一个节点到叶子节点，经过的黑色节点是一样的</p></li></ol><p>红黑树的形式如下图所示：</p><p><img src="http://img.hjl1998.cn/20200109153308.png" alt=""></p><h1 id="红黑树与2-3树的等价性"><a href="#红黑树与2-3树的等价性" class="headerlink" title="红黑树与2-3树的等价性"></a>红黑树与2-3树的等价性</h1><h2 id="2-3树"><a href="#2-3树" class="headerlink" title="2-3树"></a>2-3树</h2><p>我们先来介绍一下2-3树这一种数据结构</p><p>2-3树满足二分搜索树的基本特性，但是却存在两种节点</p><ol><li>一个节点存在一个值，有两个孩子</li><li>一个节点存在两个值，有三个孩子</li></ol><p>这就是2-3树名字的由来，但是如果有三个孩子，为什么说它满足二分搜索树的基本特性的，因为我们知道二分搜索树是一颗二叉树，这和2-3树第二种节点的定义不是矛盾了么？</p><p>其实我们说2-3树满足二分搜索树的基本特性，是根据孩子的分类来的，2-3树的第二种节点的两个值中，三个孩子分别为：比较小的值小，比较大的值大以及处于两个值的中间的数值。这样我们不难理解，2-3树为什么满足二分搜索树的基本特性了。</p><p>除此之外，2-3树还有一个特性，就是<font color = #FF0000>2-3树是绝对平衡的</font>，也就是说，它从根节点到任意叶子节点，路径长度相同。</p><p>如图所示是一颗基本的2-3树</p><p><img src="http://img.hjl1998.cn/20200109154709.png" alt=""></p><h2 id="红黑树与2-3树的联系"><a href="#红黑树与2-3树的联系" class="headerlink" title="红黑树与2-3树的联系"></a>红黑树与2-3树的联系</h2><p>那么为什么说红黑树和2-3树是等价的呢</p><p>我们可以做一些类比，如下图</p><p><img src="http://img.hjl1998.cn/20200110124525.png" alt=""></p><p>2节点，我们可以类比红黑树的黑色单个节点</p><p>3节点，小的值我们可以类比红黑树左孩子，并且用红色标识</p><p>基于这个概念，我们就可以把上面的2-3树构建出一颗红黑树</p><p><img src="http://img.hjl1998.cn/20200110115842.png" alt=""></p><p>因为2-3树是绝对平衡的，所以在2-3树中，从根节点到叶子节点路径长度都一样</p><p>这样我们就不难理解，为什么红黑树<font color=#FF0000>从任意一个节点到叶子节点，经过的黑色节点是一样的</font>,那是因为所有的红色节点都被看做和父亲节点一起，相当于2-3树中的3节点</p><p>如果还不明白，可以把红色节点横过来</p><p><img src="http://img.hjl1998.cn/20200110124650.png" alt=""></p><p>是不是豁然开朗</p><p>而紧接着，红黑树的剩下四个性质都不难推倒出来了，这就是红黑树和2-3树的联系，它们是等价的</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="首先是红黑树的构建"><a href="#首先是红黑树的构建" class="headerlink" title="首先是红黑树的构建"></a>首先是红黑树的构建</h2><p>构建红黑树，与二分搜索树类似，不同的是红黑树多了<code>color</code>这个成员变量，来标志节点的颜色</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RBTree</span><span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>K<span class="token operator">></span><span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> RED <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> BLACK <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> K key<span class="token punctuation">;</span>        <span class="token keyword">public</span> V value<span class="token punctuation">;</span>        <span class="token keyword">public</span> Node left<span class="token punctuation">,</span>right<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> color<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Node</span> <span class="token punctuation">(</span>K key<span class="token punctuation">,</span>V value<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token operator">=</span>key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            left <span class="token operator">=</span> null<span class="token punctuation">;</span>            right <span class="token operator">=</span> null<span class="token punctuation">;</span>            color <span class="token operator">=</span> RED<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node root<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RBTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        root <span class="token operator">=</span> null<span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isRed</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> BLACK<span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>color<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h2><p>分析红黑树添加节点的情况</p><p>第一种</p><p>插入的是黑色节点的左边，我们直接插入即可</p><p>第二种</p><p>插入的是黑色节点的右边，但黑色节点没有左孩子，我们就对该黑色节点进行左旋转</p><p>第三种</p><p>插入的是黑色节点的右边，但是黑色节点有左孩子，我们只要对黑色节点和两个孩子节点进行颜色反转</p><p>第四种</p><p>插入的是黑色节点的左红孩子的左孩子，那么我们就对该黑色节点进行右旋转</p><p>第五种</p><p>插入的是黑色节点的左红孩子的右孩子，我们先对黑色节点的左孩子进行左旋转，然后对黑色节点进行右旋转</p><p><img src="http://img.hjl1998.cn/20200110142926.png" alt=""></p><p>所以我们所需要三种辅助方法，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//左旋转</span>    <span class="token keyword">private</span> Node <span class="token function">leftRotate</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span><span class="token punctuation">{</span>        Node x <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>right <span class="token operator">=</span> x<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>color <span class="token operator">=</span> node<span class="token punctuation">.</span>color<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//颜色反转</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">flipColor</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span><span class="token punctuation">{</span>        node<span class="token punctuation">.</span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//右旋转</span>    <span class="token keyword">private</span> Node <span class="token function">rightRotate</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span><span class="token punctuation">{</span>        Node x <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>left <span class="token operator">=</span> x<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>color <span class="token operator">=</span> node<span class="token punctuation">.</span>color<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><p>我们已经分析了添加节点的五种情况，那我们就可以根据这五种情况来编写<code>add</code>方法</p><p>先看代码</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//往红黑树中添加一个节点</span>    <span class="token keyword">private</span> Node <span class="token function">add</span><span class="token punctuation">(</span>Node node<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            size<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isRed</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>            node <span class="token operator">=</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRed</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>            node <span class="token operator">=</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRed</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">flipColor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>在二分搜索树的基础上，我们在每次递归中加入节点维护，进行相应的操作</p><p>由此，红黑树的添加操作就终于完成了</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>对于红黑树的添加，我们看到子过程十分复杂，其中我们进行了很多步的分类讨论</p><p>其实对于红黑树的删除，比红黑树的添加更加复杂，这里就不过多的深入了</p><p>（我也是入门，根本不会hhh）</p><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p>其实对于我们上述实现的红黑树，更确切的叫法可以叫左倾红黑树，顾名思义，就是它所有红色节点都是黑色节点的左孩子，这只是红黑树的实现方式的一种，还有其他的比如右倾红黑树这种实现方式。</p><p>相比于AVL树来说，红黑树之所以用的多，是因为红黑树是一种统计性能更优的数据结构，而对于删除添加，对比AVL树并没有很大的优势。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;红黑树也许是历史上最富盛名的一种平衡二叉树。顾名思义，它和红色和黑色两种颜色有关，但是很多介绍红黑树的材料对于这个数据结构都比较形式化，不过
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://hwhjl.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数据结构" scheme="http://hwhjl.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>简单的用java做一个爬虫</title>
    <link href="http://hwhjl.com/2019/12/21/jian-dan-de-yong-java-zuo-yi-ge-pa-chong/"/>
    <id>http://hwhjl.com/2019/12/21/jian-dan-de-yong-java-zuo-yi-ge-pa-chong/</id>
    <published>2019-12-21T08:31:13.000Z</published>
    <updated>2020-02-24T10:01:15.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络爬虫是什么"><a href="#网络爬虫是什么" class="headerlink" title="网络爬虫是什么"></a>网络爬虫是什么</h1><p>​    网络爬虫（又称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫 。<br>​    简而言之，网络爬虫就是帮助我们访问网络上的资源，我们一直以来都是用http协议访问互联网的网页，网络爬虫需要编写程序，我们这里同样用http协议访问网页。<br>​    这里我们用java的HTTP协议客户端<code>HttpClient</code>这个技术，来实现抓取网页数据。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>jdk 1.8</p><p>IDEA</p><p>Maven</p><h1 id="写一个入门程序"><a href="#写一个入门程序" class="headerlink" title="写一个入门程序"></a>写一个入门程序</h1><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><p>第一步，我们需要从maven仓库中找到<code>HttpClient</code>这个包，pom文件如下添加</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>然后我们先写一个入门小程序，比如让<code>url</code>指向<code>www.taobao.com</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建HttpClient对象</span>        CloseableHttpClient httpClient <span class="token operator">=</span> HttpClients<span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.输入网址，发起Get请求创建HttpGet对象</span>        HttpGet httpGet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpGet</span><span class="token punctuation">(</span><span class="token string">"http://www.taobao.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.按回车，发起请求并返回响应</span>        CloseableHttpResponse response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpGet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.解析请求，如果状态码是200则输入响应实体</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            HttpEntity httpEntity <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String content <span class="token operator">=</span> EntityUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>httpEntity<span class="token punctuation">,</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>运行程序，观察控制台，打印出了完整的返回数据，很容易看出这是个html网页</p><p><img src="http://img.hjl1998.cn/%E6%B7%98%E5%AE%9D.png" alt=""></p><p>实际上这就是我们模拟了http协议向淘宝发送了请求，返回给我们的一个完整的网页</p><h1 id="请求传参"><a href="#请求传参" class="headerlink" title="请求传参"></a>请求传参</h1><p>​        我们发现，我们可以很轻易的使用<code>httpclient</code>来进行网页的访问，但是，我们写的入门代码有一定的局限性，比如下面这个例子，我们发现在虎牙搜索的时候，地址栏里会传入我们搜索的参数，我们怎么才能在访问的时候附带我们的参数呢</p><p><img src="http://img.hjl1998.cn/20200103172046.png" alt=""></p><p>其实很简单，我们只要用到<code>URIBuilder</code>这个对象来帮我们</p><p>代码如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> URISyntaxException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建Httpclient对象</span>        CloseableHttpClient httpClient <span class="token operator">=</span> HttpClients<span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建URIBuilder</span>        URIBuilder uriBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URIBuilder</span><span class="token punctuation">(</span><span class="token string">"http://huya.com/search"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置参数</span>        uriBuilder<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token string">"hsk"</span><span class="token punctuation">,</span><span class="token string">"骚男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建HttpGet对象,传入带参URI</span>        HttpGet httpGet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpGet</span><span class="token punctuation">(</span>uriBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用HttpClient对象发送请求，获取response对象</span>        CloseableHttpResponse response <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpGet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//解析响应</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                String content <span class="token operator">=</span> EntityUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                response<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                httpClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>当我们的参数有多个的时候，我们也可以用多个<code>uriBuilder.setParameter(&quot;键&quot;,&quot;值&quot;);</code>来设置参数</p><h1 id="改用Post请求"><a href="#改用Post请求" class="headerlink" title="改用Post请求"></a>改用Post请求</h1><h2 id="入门程序修改"><a href="#入门程序修改" class="headerlink" title="入门程序修改"></a>入门程序修改</h2><p>这个时候有很多小伙伴会问了，怎么让客户端发送Post请求而不是Get呢</p><p>其实这个很简单，只要把入门代码中的<code>HttpGet</code>全部改成<code>HttpPost</code>就OK了</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建HttpPost对象,传入带参URI</span>HttpPost httpPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span>uriBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="带参数的Post请求"><a href="#带参数的Post请求" class="headerlink" title="带参数的Post请求"></a>带参数的Post请求</h2><p>想让Post请求带参数，我们就得先声明一个List封装键值对</p><p>代码如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> URISyntaxException<span class="token punctuation">,</span> UnsupportedEncodingException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建Httpclient对象</span>        CloseableHttpClient httpClient <span class="token operator">=</span> HttpClients<span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建HttpGet对象,传入URL</span>        HttpPost httpPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span><span class="token string">"http://huya.com/search"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//声明List集合，封装元素</span>        List<span class="token operator">&lt;</span>NameValuePair<span class="token operator">></span>  params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>NameValuePair<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicNameValuePair</span><span class="token punctuation">(</span><span class="token string">"hsk"</span><span class="token punctuation">,</span><span class="token string">"骚男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建表单Entity对象</span>        UrlEncodedFormEntity formEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlEncodedFormEntity</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把Entity对象封装到HttpPost中</span>        httpPost<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>formEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//使用HttpClient对象发送请求，获取response对象</span>        CloseableHttpResponse response <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpPost<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//解析响应</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                String content <span class="token operator">=</span> EntityUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                response<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                httpClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h1 id="进一步"><a href="#进一步" class="headerlink" title="进一步"></a>进一步</h1><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><p>如果每次请求都要创建HttpClient，那么会造成频繁的创建和销毁的问题，那细心的你肯定想到了，连接池技术</p><p>就像java的jdbc连接池一样，利用连接池来减少创建销毁的次数来保证程序的效率更高，这里我们用到了<code>PoolingHttpClientConnectionManager</code>这个类</p><p>完整代码如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hwhjl<span class="token punctuation">.</span>crawler<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpEntity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span>CloseableHttpResponse<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span>HttpGet<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>client<span class="token punctuation">.</span>CloseableHttpClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>client<span class="token punctuation">.</span>HttpClients<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>PoolingHttpClientConnectionManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EntityUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpClientPoolTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建连接池管理器</span>        PoolingHttpClientConnectionManager cm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PoolingHttpClientConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用连接池管理器发起请求</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>cm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>PoolingHttpClientConnectionManager cm<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//从连接池获取httpClient对象</span>        CloseableHttpClient httpClient <span class="token operator">=</span> HttpClients<span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setConnectionManager</span><span class="token punctuation">(</span>cm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输入网址，发起Get请求创建HttpGet对象</span>        HttpGet httpGet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpGet</span><span class="token punctuation">(</span><span class="token string">"http://www.taobao.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//按回车，发起请求并返回响应</span>        CloseableHttpResponse response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpGet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解析请求，如果状态码是200则输入响应实体</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            HttpEntity httpEntity <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String content <span class="token operator">=</span> EntityUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>httpEntity<span class="token punctuation">,</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        response<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>相信通过上述代码的编写，对java写一个小爬虫就有了初步的认识</p><p>其实用java写爬虫咱么可以借助很多第三方包，比如最常见的<code>jsoup</code></p><p>对于爬虫的进一步学习，可以从jsoup开始</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络爬虫是什么&quot;&gt;&lt;a href=&quot;#网络爬虫是什么&quot; class=&quot;headerlink&quot; title=&quot;网络爬虫是什么&quot;&gt;&lt;/a&gt;网络爬虫是什么&lt;/h1&gt;&lt;p&gt;​    网络爬虫（又称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种
      
    
    </summary>
    
    
      <category term="Java" scheme="http://hwhjl.com/categories/Java/"/>
    
    
      <category term="瞎搞" scheme="http://hwhjl.com/tags/%E7%9E%8E%E6%90%9E/"/>
    
  </entry>
  
  <entry>
    <title>Trie字典树</title>
    <link href="http://hwhjl.com/2019/11/18/trie-zi-dian-shu/"/>
    <id>http://hwhjl.com/2019/11/18/trie-zi-dian-shu/</id>
    <published>2019-11-18T11:41:52.000Z</published>
    <updated>2020-01-08T12:37:58.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p> 又称字典树，Trie树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="构建一颗字典树"><a href="#构建一颗字典树" class="headerlink" title="构建一颗字典树"></a>构建一颗字典树</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hwhjl<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>trie<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>TreeMap<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> isWord<span class="token punctuation">;</span>        <span class="token keyword">public</span> TreeMap<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span>Node<span class="token operator">></span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isWord<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>isWord<span class="token operator">=</span>isWord<span class="token punctuation">;</span>            next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node root<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        root<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回存储单词的数量</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="在字典树中添加单词"><a href="#在字典树中添加单词" class="headerlink" title="在字典树中添加单词"></a>在字典树中添加单词</h2><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//添加一个单词</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span><span class="token punctuation">{</span>        Node cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">.</span>isWord<span class="token punctuation">)</span><span class="token punctuation">{</span>            cur<span class="token punctuation">.</span>isWord<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            size<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="从字典树中查询单词"><a href="#从字典树中查询单词" class="headerlink" title="从字典树中查询单词"></a>从字典树中查询单词</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//查询一个单词是否在树中</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span><span class="token punctuation">{</span>        Node cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cur<span class="token punctuation">.</span>isWord<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="前缀搜索"><a href="#前缀搜索" class="headerlink" title="前缀搜索"></a>前缀搜索</h2><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//前缀查询</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPrefix</span><span class="token punctuation">(</span>String prefix<span class="token punctuation">)</span><span class="token punctuation">{</span>        Node cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>prefix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>因为所有的单词本身就是自己的前缀，所以Trie也叫前缀树</p><h1 id="模糊匹配"><a href="#模糊匹配" class="headerlink" title="模糊匹配"></a>模糊匹配</h1><p>我们假设一个字符串中，‘.’代表的是匹配任意字符，那我们可以设计该方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//模糊匹配（.可以代表任意字母）</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">match</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>word<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">match</span><span class="token punctuation">(</span>Node node<span class="token punctuation">,</span> String word<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>isWord<span class="token punctuation">;</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">match</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>word<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> nextChar<span class="token operator">:</span>node<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">match</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nextChar<span class="token punctuation">)</span><span class="token punctuation">,</span>word<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>字典树的好处在于，它不在乎数据条目的多少，不管有多大的数据量，它只和传入的参数的长度有关，对于有规则的参数表现形式，比如英文单词，字典树可以大大提升其查找效率。</p><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt; 又称字典树，Trie树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://hwhjl.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数据结构" scheme="http://hwhjl.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Lambda expression are not supported at language level &#39;5&#39;</title>
    <link href="http://hwhjl.com/2019/11/17/lambda-expression-are-not-supported-at-language-level-5/"/>
    <id>http://hwhjl.com/2019/11/17/lambda-expression-are-not-supported-at-language-level-5/</id>
    <published>2019-11-17T10:42:35.000Z</published>
    <updated>2020-01-08T11:36:43.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息:"></a>错误信息:</h1><h3 id="Lambda-expression-are-not-supported-at-language-level-‘5’"><a href="#Lambda-expression-are-not-supported-at-language-level-‘5’" class="headerlink" title="Lambda expression are not supported at language level ‘5’"></a>Lambda expression are not supported at language level ‘5’</h3><h3 id="Error-28-39-java-source-1-5-中不支持-lambda-表达式"><a href="#Error-28-39-java-source-1-5-中不支持-lambda-表达式" class="headerlink" title="Error:(28, 39) java: -source 1.5 中不支持 lambda 表达式"></a>Error:(28, 39) java: -source 1.5 中不支持 lambda 表达式</h3><h1 id="解决方式："><a href="#解决方式：" class="headerlink" title="解决方式："></a>解决方式：</h1><p>在IDEA中编译运行程序，除了可以指定编译的JDK版本外，还可以指定编译的Language Level。如果指定的Language Level选择不正确，即使使用的是java正确对应版本，在编译程序的时候还是会可能发生程序编译错误。</p><p>上面的错误是lambda表达式语言特性在Language Level 5下是不支持。这需要我们将Language Level调整到8.</p><p><font color=#FF0000>  具体操作如下：</font>  </p><p>点击File|Project Structure..或者使用快捷键Ctrl+Alt+Shift+S调整项目结构设置。</p><p><img src="http://img.hjl1998.cn/20200106192334.png" alt=""></p><p> 将Sources中Language Level 由级别5调整到级别8. </p><p><img src="http://img.hjl1998.cn/20200106192316.png" alt=""></p><p> 如果Language Level没有级别8的支持Lambda表达式的选项，请设置工程编译SDK为1.8+，当然你前提是需要安装JDK1.8哦，并已经设置好环境变量等。 </p><p><img src="http://img.hjl1998.cn/20200106193319.png" alt=""></p><h1 id="错误信息-1"><a href="#错误信息-1" class="headerlink" title="错误信息:"></a>错误信息:</h1><h3 id="Error-java-Compilation-failed-internal-java-compiler-error"><a href="#Error-java-Compilation-failed-internal-java-compiler-error" class="headerlink" title="Error:java: Compilation failed: internal java compiler error"></a>Error:java: Compilation failed: internal java compiler error</h3><h1 id="解决方式：-1"><a href="#解决方式：-1" class="headerlink" title="解决方式："></a>解决方式：</h1><p> 解决办法很简单：File–&gt;Setting…–&gt;Build,Execution,Deployment–&gt;Compiler–&gt;Java Compiler 设置相应Module的target bytecode version的合适版本（跟你jkd版本一致），这里我改成1.8版本的。 </p><h3 id="大功告成，继续Happy你的Lambda表达式吧"><a href="#大功告成，继续Happy你的Lambda表达式吧" class="headerlink" title=" 大功告成，继续Happy你的Lambda表达式吧"></a><font color=#FF0000> 大功告成，继续Happy你的Lambda表达式吧</font></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;错误信息&quot;&gt;&lt;a href=&quot;#错误信息&quot; class=&quot;headerlink&quot; title=&quot;错误信息:&quot;&gt;&lt;/a&gt;错误信息:&lt;/h1&gt;&lt;h3 id=&quot;Lambda-expression-are-not-supported-at-language-level-‘
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://hwhjl.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="杀bug" scheme="http://hwhjl.com/tags/%E6%9D%80bug/"/>
    
  </entry>
  
  <entry>
    <title>线段树</title>
    <link href="http://hwhjl.com/2019/11/16/xian-duan-shu/"/>
    <id>http://hwhjl.com/2019/11/16/xian-duan-shu/</id>
    <published>2019-11-16T09:46:25.000Z</published>
    <updated>2020-02-26T04:52:06.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​        细数着大三也就过去了大半，想想前两年过的大学，懊悔不已，当初为什么不好好学习，在考研和就业两条路上斟酌了很久，最后还是选择了就业，听学长说大三下学期的春招可以试试，怀着一腔热血和悔恨，决定还是从基础看起，既然身为程序员，基本的数据结构知识储备还是必不可少的，那么废话不多说，数据结构系列走起。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>​        线段树，是一种二叉搜索树，顾名思义，是对一段数据进行操作的树，它将区间划分成一些单元区间，每个单元区间对应线段树中的一个叶子节点。经典的线段树例题<code>区间染色</code>、<code>区间查询</code>。</p><h1 id="区间的一般操作"><a href="#区间的一般操作" class="headerlink" title="区间的一般操作"></a>区间的一般操作</h1><p>一般来说，区间的长度一般都是确定的，所以对于区间的<code>添加</code>和<code>删除</code>操作我们一般不考虑，所以对于线段树，着重研究它的<code>更新</code>和<code>查询</code>两个操作，对于复杂度，线段树将一般区间操作的O(N)降低到了O(logN)</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h3 id="线段树的形式"><a href="#线段树的形式" class="headerlink" title="线段树的形式"></a>线段树的形式</h3><p>以求和为例，分层级表示一段区间内的和，每个节点表示不同区间的和</p><p><img src="http://img.hjl1998.cn/20200106180921.png" alt=""></p><p>上述为8个元素的线段树，而8这个元素比较特殊，刚好是2的3次。其实线段树不一定是完全二叉树，也不一定是满二叉树，如下图10个元素</p><p><img src="http://img.hjl1998.cn/20200106181904.png" alt=""></p><p>但是线段树一定是平衡二叉树(深度最大和最小差小于等于1)</p><h3 id="如何把N个元素表示成一颗线段树"><a href="#如何把N个元素表示成一颗线段树" class="headerlink" title="如何把N个元素表示成一颗线段树"></a>如何把N个元素表示成一颗线段树</h3><p>我们可以用<code>数组</code>存储线段树的节点</p><p>而对于数组长度n，我们有以下原则</p><p>最好情况：当<code>N = 2^k</code> ，则n取2N，为满二叉树</p><p>最坏情况：当<code>N=2^k+1</code>，则n取4N，会造成一定的空间浪费</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>对于基本的线段树，代码如下 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SegmentTree</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> E<span class="token punctuation">[</span><span class="token punctuation">]</span> tree<span class="token punctuation">;</span>    <span class="token keyword">private</span> E<span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> Merger<span class="token operator">&lt;</span>E<span class="token operator">></span> merger<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化线段树</span>    <span class="token keyword">public</span> <span class="token function">SegmentTree</span><span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span>Merger<span class="token operator">&lt;</span>E<span class="token operator">></span> merger<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>merger <span class="token operator">=</span> merger<span class="token punctuation">;</span>        data <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tree <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span>data<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">buildSegmentTree</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在区间treeIndex的位置创建表示[l，r]的线段树</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">buildSegmentTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> treeIndex<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            tree<span class="token punctuation">[</span>treeIndex<span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> leftTreeIndex <span class="token operator">=</span> <span class="token function">leftChild</span><span class="token punctuation">(</span>treeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> rightTreeIndex <span class="token operator">=</span> <span class="token function">rightChild</span><span class="token punctuation">(</span>treeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止溢出</span>            <span class="token function">buildSegmentTree</span><span class="token punctuation">(</span>leftTreeIndex<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">buildSegmentTree</span><span class="token punctuation">(</span>rightTreeIndex<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            tree<span class="token punctuation">[</span>treeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> merger<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>leftTreeIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>rightTreeIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取区间长度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取对应节点的值</span>    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>index<span class="token operator">></span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Index is Illegal."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回左孩子的节点索引</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">leftChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回右孩子的节点索引</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rightChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>index<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        StringBuilder res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>tree<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">!=</span>tree<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><font color=#FF0000>这里写一个接口，自定义此线段树结合方式</font></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Merger</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> E <span class="token function">merge</span><span class="token punctuation">(</span>E a<span class="token punctuation">,</span> E b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><font color=#FF0000>Main方法测试</font></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        SegmentTree<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SegmentTree</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果如下</p><pre class=" language-java"><code class="language-java">D<span class="token operator">:</span>\JAVA\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_131\bin\java<span class="token punctuation">.</span>exe<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">]</span>Process finished with exit code <span class="token number">0</span></code></pre><p>线段树的构造是不是简单的一批。</p><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p>查询操作得分情况考虑</p><p>考虑用递归简化代码</p><p>代码如下</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//返回[L，R]区间的值</span>    <span class="token keyword">public</span> E <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>L<span class="token operator">>=</span>data<span class="token punctuation">.</span>length<span class="token operator">||</span>R<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>R<span class="token operator">>=</span>data<span class="token punctuation">.</span>length<span class="token operator">||</span>R<span class="token operator">&lt;</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Index is illega."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>L<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//搜索在以treeIndex为根的线段树中[l,r]的范围里，搜索区间[L，R]的值</span>    <span class="token keyword">public</span> E <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> treeIndex<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>L<span class="token operator">&amp;&amp;</span>R<span class="token operator">==</span>r<span class="token punctuation">)</span>            <span class="token keyword">return</span> tree<span class="token punctuation">[</span>treeIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> leftTreeIndex <span class="token operator">=</span> <span class="token function">leftChild</span><span class="token punctuation">(</span>treeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rightTreeIndex <span class="token operator">=</span> <span class="token function">rightChild</span><span class="token punctuation">(</span>treeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>R<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>leftTreeIndex<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>L<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">>=</span>mid<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>rightTreeIndex<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>L<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>        E leftResult <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>leftTreeIndex<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>L<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        E rightResult <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>rightTreeIndex<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> merger<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>leftResult<span class="token punctuation">,</span>rightResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>时间复杂度为O(logN)级别，高效又简单。</p><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p>更新操作要注意的一点是一旦叶子节点更新了，那么它的祖辈节点都需要更新操作</p><p>也是通过递归代码实现</p><p>代码如下</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//更新index索引位置为e</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span>E e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>index<span class="token operator">>=</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Index is illega."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>        <span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>index<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> treeIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">,</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            tree<span class="token punctuation">[</span>treeIndex<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> leftTreeIndex <span class="token operator">=</span> <span class="token function">leftChild</span><span class="token punctuation">(</span>treeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rightTreeIndex <span class="token operator">=</span> <span class="token function">rightChild</span><span class="token punctuation">(</span>treeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>            <span class="token function">set</span><span class="token punctuation">(</span>leftTreeIndex<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>index<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//index>mid</span>            <span class="token function">set</span> <span class="token punctuation">(</span>rightTreeIndex<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>index<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>treeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> merger<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>leftTreeIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>rightTreeIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>完成，基于线段树的两大基本操作原理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;​        细数着大三也就过去了大半，想想前两年过的大学，懊悔不已，当初为什么不好好学习，在考研和就业两条路上斟酌了很久，最后还是选择
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://hwhjl.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数据结构" scheme="http://hwhjl.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>希尔排序</title>
    <link href="http://hwhjl.com/2019/11/03/pai-xu-zhuan-ti-xi-er-pai-xu/"/>
    <id>http://hwhjl.com/2019/11/03/pai-xu-zhuan-ti-xi-er-pai-xu/</id>
    <published>2019-11-03T08:44:35.000Z</published>
    <updated>2020-02-22T08:17:33.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是希尔排序？"><a href="#什么是希尔排序？" class="headerlink" title="什么是希尔排序？"></a>什么是希尔排序？</h1><p>希尔排序的名称来源于它的发明者（Donald Shell）,又被称为缩小递增排序。该算法是最早一批突破二次时间复杂度的排序算法之一，但是仅仅达到了O(N^3/2^)的复杂度，还远远没有达到一般排序模型的下界O(N log     N)。即便如此，因为其操作比快排等简单，所以该算法也常被用于对时间复杂度要求不高的大量数据的排序中。</p><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>优点在于算法非常简单，而且只需要O(N^3/2^)的时间复杂度，对于一些特殊的序列，采用特定的增量序列能产生出其不意的效果。</p><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>使用不同的增量序列，产生的波动将会极其剧烈，一些有除1之外的最小公约数的增量对可能会导致将之前已经排序完成的序列再次打乱的后果。</p><p>在分析计算其复杂度时，极其复杂，需要用到组合数学和数论中的知识。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>取一个增量（shell建议使用数组大小的一半），然后将此增量序列的倍数位置的元素看成一组，对每一组分别得进行插入排序，使其在组内有序。</p><p>然后取下一个增量（shell建议取上一个增量的一半），以这个增量来对数组再次进行上面的操作，直到取到的增量为0时结束。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>因为在插入排序中，一共需要交换的次数是该序列的逆序数，所以时间复杂度是O(N^2^),如果有一个特别大的元素在序列的前面，那么在其后面的比它小的所有的元素都需要加1的逆序数，所以插入排序就需要为了这么一个元素而交换多次。</p><p>我们想象一下，能不能有一种方法，可以直接跳过这么多比它小的元素，转而用一次交换来代替原来的多次交换。对了，就是希尔排序。正如shell所推荐的那样，每次尽可能挑选一个大一点，又能接触到所有元素的增量，所以自然而然得就得出了第一个增量为总元素数的一半，每次挑前一个增量的一半的结论。</p><p>接下来是代码的思路：</p><p>此算法通过三个嵌套的循环来完成。</p><p>第一个循环用来控制增量的变化。</p><p>第二个循环针对每一个增量来进行分组，同时又有插入排序的每次插入一个元素的功能。</p><p>第三个循环则是插入排序的将比要插入元素大的元素都挪到右边的功能，区别只在于，每一次都是按照一个增量来递增，而不是原来的1，这样就可以实现在组内挪动了。</p><p>将这三个循环嵌套起来，就完成了最简单的希尔排序了。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">sort_shell</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>t<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            temp <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> j<span class="token punctuation">;</span> t <span class="token operator">></span> i <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>t<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">></span>temp<span class="token punctuation">;</span> t <span class="token operator">-</span><span class="token operator">=</span> i<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            a<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p>参数：待排序的数组的指针，数组的大小。</p><p>其中有4个变量，temp用来临时存储插入排序中每次插入的值。</p><p>i 用来记录此次的增量值，最开始为数组大小的一半，之后每次整除2。</p><p>j 作为游标来将新的数给插入到前面已排序的序列中，从i开始，一直到数组尾结束。</p><p>t 作为插入时的分组工具以及控制往后挪的元素，从j开始，到i结束，每次递减增量的值来实现组内后挪。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>1、注意最外层的循环是可以随意改变的，但是改变得不好会导致复杂度增加。</p><p>2、第二层循环是从i开始的，是因为前i个都是默认作为每组内一开始被插入的值，因为是初始值，不需要比较，所以就直接跳过，从第二个值开始了。</p><p>3、第三层的每一层都是以增量为跨度跳过的，所以内层循环结束条件也应该停止在增量位置。</p><h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><p>此算法的改进方式就在于增量序列的选择，因为不同的增量序列会造成的影响是巨大的。</p><p>一般来说，都是采用shell所推荐的增量序列，但是为了更好的复杂度，Sedgewick提出了几种增量序列，其中最好的是序列<code>{1，5，19，41，109}</code> 转换成公式就是下面两个公式的值。<br>$$<br>9*(4^i-2^i)+1<br>$$</p><p>$$<br>4^i-3*2^i+1<br>$$<br>当i为0时，公式（1）为1</p><p>当i为1时，公式（1）为19</p><p>当i为2时，公式（1）为109，公式（2）为5</p><p>当i为3时，公式（1）为505，公式（2）为41</p><p>在代码实现中，就只要将这两个公式打好表之后用大循环的下标调用即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是希尔排序？&quot;&gt;&lt;a href=&quot;#什么是希尔排序？&quot; class=&quot;headerlink&quot; title=&quot;什么是希尔排序？&quot;&gt;&lt;/a&gt;什么是希尔排序？&lt;/h1&gt;&lt;p&gt;希尔排序的名称来源于它的发明者（Donald Shell）,又被称为缩小递增排序。该算法是最
      
    
    </summary>
    
    
      <category term="排序专题" scheme="http://hwhjl.com/categories/%E6%8E%92%E5%BA%8F%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="算法" scheme="http://hwhjl.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>堆排序</title>
    <link href="http://hwhjl.com/2019/11/03/pai-xu-zhuan-ti-dui-pai-xu/"/>
    <id>http://hwhjl.com/2019/11/03/pai-xu-zhuan-ti-dui-pai-xu/</id>
    <published>2019-11-03T06:25:35.000Z</published>
    <updated>2020-02-22T08:16:52.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是堆排序？"><a href="#什么是堆排序？" class="headerlink" title="什么是堆排序？"></a>什么是堆排序？</h1><p>堆排序是通过优先队列（二叉堆）实现的排序。它的时间复杂度为O(N log N)，空间复杂度是O(N)，或者说是类似二叉树的复杂度，因为其本身就是一个在数组中实现的简化的完全二叉树，并不需要像二叉树那样复杂的操作和多余的指针空间，而只要将一个数组就可以完成。</p><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>不需要额外的空间，时间复杂度为O(N log N)，能解决大部分情况，运行较为稳定，对数据分布要求不高。</p><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>对于一些对时间要求更高的程序略显捉急。</p><p>在实现方面完全自己动手来实现会略显麻烦，但也只是一点点而已。</p><p>在实践中会慢于使用在《排序专题——希尔排序》中给出的使用最优的增量队列的希尔排序。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>因为二叉堆可以实现一个优先队列，而堆的特性是把大的元素放在上面，那我们可以想象，如果每次把堆最上面的元素给取走，然后维护一下堆就又是一个具有堆的性质的数组了，而被拿走一个元素之后，堆的大小也会减一，也就是说，堆的最后会空出来一个位置，那么这时候就可以将这个被取走的最大元素给放进那个空出来的位置。按这样的方式将所有元素取完，就完成了排序。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>在C++中有一个快捷的堆排序方式，那就是使用C++自带的make_heap函数和pop_heap函数。</p><p>make_heap函数能将任意一个数组转换成二叉堆。</p><p>pop_heap函数能让一个堆中位于队首的元素出队，所谓的出队就是将第一个元素移动到队尾，然后维护不包含最后那个元素部分的堆。</p><p>这样就只要先调用一下make_heap函数,然后循环调用pop_heap即可完成排序。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">sort_heap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">make_heap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">pop_heap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p>就是用i来表示n的大小，然后每次按照这个大小来出队即可。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>这里给出的代码只是最简单的实现方法，如果要自己实现的话，请先用二叉堆来实现一个优先队列，然后调用优先队列的操作方法即可。</p><h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><p>将二叉堆操作中的上滤和下滤操作的代码单独提出，加入到排序的操作中去，这样就可以解决一些不能使用make_heap函数的情况，同时能够使用在链表中。但是不建议在链表中使用堆排序，因为堆排序有随机读取的要求，所以不适合在链表中使用。而且，在不使用标准库的make_heap和pop_heap的方式之后会极大得加快排序的速度。</p><p>改进后的代码如下：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">sort_heap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实现make_heap的功能</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>t <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> a<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>t <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>t <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>t <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>t <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        t <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>t <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        t <span class="token operator">=</span> t <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>t <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>t <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    t <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实现pop_heap的功能</span>        <span class="token keyword">int</span> temp<span class="token punctuation">,</span>j<span class="token punctuation">;</span>        j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">&lt;=</span> i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> i<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                j <span class="token operator">=</span> j <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    j <span class="token operator">=</span> j <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                j <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        a<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>冗长但是高效</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是堆排序？&quot;&gt;&lt;a href=&quot;#什么是堆排序？&quot; class=&quot;headerlink&quot; title=&quot;什么是堆排序？&quot;&gt;&lt;/a&gt;什么是堆排序？&lt;/h1&gt;&lt;p&gt;堆排序是通过优先队列（二叉堆）实现的排序。它的时间复杂度为O(N log N)，空间复杂度是O(N)
      
    
    </summary>
    
    
      <category term="排序专题" scheme="http://hwhjl.com/categories/%E6%8E%92%E5%BA%8F%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="算法" scheme="http://hwhjl.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>插入排序</title>
    <link href="http://hwhjl.com/2019/11/03/pai-xu-zhuan-ti-cha-ru-pai-xu/"/>
    <id>http://hwhjl.com/2019/11/03/pai-xu-zhuan-ti-cha-ru-pai-xu/</id>
    <published>2019-11-03T05:12:15.000Z</published>
    <updated>2020-02-22T08:16:39.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是插入排序？"><a href="#什么是插入排序？" class="headerlink" title="什么是插入排序？"></a>什么是插入排序？</h1><p>插入排序是最简单最基础的排序方式之一，其复杂度为O(n^2),虽然复杂度高，但是在对于一些几乎已经排序完成(almost sorted)的随机数排序有奇效。在和快排配合之后，能在很大程度上加快排序的速度。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>想象一个大的随机数组，这个数组已经部分被排序(从第1个元素到第m个元素已经被排序，总共有n个元素)，那么我们就在此基础上，每次从第m+1位拓展一位，并对其从后往前比较并将前面的元素向后挪，直到发现一个不比其大的元素时停止。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>我们将一个随机数组分成两部分，一部分是已经被排序的，另一部分是未被排序的，已经被排序的初始为0，先内层循环判断下标是否大于0，从而将第一个元素加入已经被排序的部分之中，然后每次向后拓展一位，然后将其不断于前面比它大的元素判断，并将前面的元素往后交换，如果遇到不大于它的，此时因为前面部分是已排序的，所以只要有一个不大于它，那么这之前的都不大于它，此时将新来的元素插入这个空出的位置，这样就完成了插入的排序。<br>所谓的插入排序，就是每次插入一个元素到已经被排序好的数组中，然后将其一步步挪到对应的位置。<br>对于已经被几乎排序完成的数组来说，因为对于排序好的部分，每次读入之后内层循环都会直接判读为false，并不需要交换，所以可以以极快的速度来实现排序。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">sort_insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span>temp<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p>i用来每次加入一个新的元素，temp用来记录这个新加入的元素的值。<br>内层循环从尾到头判断是否应当放入，如果不放入，就将此元素向后挪一下，留出一个空位来给前面的往后挪或者放入新元素。<br>在内层循环结束之后，就可以将新元素放入了。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>因为代码简单，所以要注意的东西不多，只要注意在已排序数组大小为0时情况，内层循环的j是递减即可。</p><h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><p>这个算法本身因为复杂度高，而且代码简短，不怎么需要改进，但是可以结合快速排序，来处理快速排序的完成了大部分排序的部分。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是插入排序？&quot;&gt;&lt;a href=&quot;#什么是插入排序？&quot; class=&quot;headerlink&quot; title=&quot;什么是插入排序？&quot;&gt;&lt;/a&gt;什么是插入排序？&lt;/h1&gt;&lt;p&gt;插入排序是最简单最基础的排序方式之一，其复杂度为O(n^2),虽然复杂度高，但是在对于一些几
      
    
    </summary>
    
    
      <category term="排序专题" scheme="http://hwhjl.com/categories/%E6%8E%92%E5%BA%8F%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="算法" scheme="http://hwhjl.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="http://hwhjl.com/2019/11/01/pai-xu-zhuan-ti-kuai-su-pai-xu/"/>
    <id>http://hwhjl.com/2019/11/01/pai-xu-zhuan-ti-kuai-su-pai-xu/</id>
    <published>2019-11-01T08:25:50.000Z</published>
    <updated>2020-02-23T06:34:48.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是快速排序？"><a href="#什么是快速排序？" class="headerlink" title="什么是快速排序？"></a>什么是快速排序？</h1><p>快速排序简称快排，是一种对冒泡排序改进的排序算法，通过二分的方式来对随机的数组进行递归排序，所以此算法可以以O(log(n))的复杂度快速得完成排序。此算法被用作c++中sort函数的主要算法。<br>#优点<br>优点恰如其名，快速，能够以O(log(n))的空间复杂度和O(nlog(n))的时间复杂度来实现排序。而且简单易实现。<br>#缺点<br>缺点是对于一些特定的状态较为不稳定，如对于已经排序完成的数组来说，快排会对其进行不必要的交换操作。<br>#思路<br>思路是在随机数组中取一个作为枢纽元，然后将比其大和比其小的分别归到两边，然后再对两边分别进行递归。</p><p>最后递归结束之后剩下来的就是排序完成的结果了。<br>#原理<br>以升序排序为例，递归排序函数包括了3个循环(一个大循环，嵌套两个小循环根据功能分别称为左右循环)还有4个量，分别是枢纽元，顶点，左游标，右游标。</p><p>枢纽元：作为<strong>划分左右两块的标准</strong>，一般取当前数组的<strong>第一个元素</strong>作为枢纽元，同时又是<strong>左游标的初始点</strong>。</p><p>顶点：表示数组要排序的<strong>元素的数量</strong>，同时又是<strong>右游标的初始点</strong>。</p><p>左游标：用来标记当前已经判断过的<strong>符合要求(比枢纽元小)的元素的右边界</strong>。</p><p>右游标：用来标记当前已经判断过的<strong>符合要求(比枢纽元大)的元素的左边界</strong>。</p><p>左循环：用来<strong>找出最左边的不符合要求(比枢纽元大)的元素</strong>，使左游标指向之。</p><p>右循环：用来<strong>找出最右边的不符合要求(比枢纽元小)的元素</strong>，使右游标指向之。</p><p>大循环：用来<strong>管理以上元素</strong>的大循环，在左游标小于右游标之前，通过它来<strong>持续循环</strong>，让元素<strong>以枢纽元为中心排到两边</strong>。</p><p>原理就是在初始化之后，通过左循环使左游标<strong>找到一个比枢纽元要大的元素</strong>，或者<strong>到达顶点</strong>，右循环使右游标分别<strong>指向一个比枢纽元要小的元素</strong>，如果到枢纽元了则会直接停下，然后<strong>交换这两个元素</strong>的位置。使其归类，但是<strong>如果当左游标大于右游标</strong>时，则退出break循环。再将<strong>此时右游标指向的位置和枢纽元进行交换</strong>，这样就完成了此层递归最主要的任务————<strong>将比枢纽元小的放到其左边，比枢纽元大的放到其右边</strong>。最后就只要以枢纽元为分界点，将左右两边的数组<strong>分别进行递归</strong>即可。<br>其主要结构如下</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token keyword">do</span><span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>l <span class="token operator">&lt;</span> u<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">--</span>r<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sort_quick</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort_quick</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">sort_quick</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>    l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> u<span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>l <span class="token operator">&lt;</span> u<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">--</span>r<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> u<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> u<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort_quick</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort_quick</span><span class="token punctuation">(</span>a <span class="token operator">+</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> u<span class="token operator">-</span>r<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p>这其中最主要的是sort_quick函数，中间到处插入的</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>是为了显示每一次交换之后的结果。<br>传入的参数a用来表示需要排序的数组，同时作为枢纽元的位置，u表示要排序的元素的个数，同时又是顶点。<br>在函数中，l和r分别代表左游标和右游标。操作和原理中的操作流程一样，不再赘述了。<br>最后对两边分别进行递归的操作中，<br>如果是对枢纽元左边的，因为u代表的是个数而不是下标的最大值，所以就只要把枢纽元所在位置的下标传入即可，不会影响到下标及其右边的内容。<br>如果是对枢纽元右边的，因为枢纽元及其左边的不能被影响，所以要在a+r的基础上加一来使其从枢纽元的右邻接点开始，同理，因为数量只有右半边，同时是右邻接点开始的，所以只要u减去枢纽元的位置，就是有递归的元素的数量了。<br>#注意事项<br>最需要注意的有三个点，<br>一是在左循环中，因为不能保证右边有一个元素能使其停止循环，所以需要每次判读，使左游标始终小于顶点。<br>二是在左右循环之后要判断左右游标的相对位置，因为是作为循环停机条件的，所以要特别注意。<br>三是在大循环之后，将枢纽元和右游标所指向的位置，注意是右游标指向的位置交换。至于为什么不是左游标，尝试一下在极端情况下，左游标可能会变成顶点的值，这样就会误触范围之外的数据了。<br>#改进</p><p>第一个改进方式是使用三数中值分割法，在选取枢纽元时先取首尾中三个元素，对他们排序后，以中间的数来作为枢元，交换到数组的开头位置。这样的方式可以减少大约5%的运行时间。</p><p>加入的额外操作如下：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> mid<span class="token operator">=</span>u<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第二个改进是通过和插入排序混合，因为在排序的递归每一份在特别小之后，分明只有一小部分需要排序，但是仍然会出现大量的递归浪费(多次递归，但是只有少部分的有效操作)，这时就可以通过添加一个阈值来在块比较小的时候及时止损，改用在此情况下效率更高的插入排序来排序。</p><p>这个阈值在不同随机数的情况下，结果也不同，但是在绝大部分情况下，会有一个对大部分情况都较为高效的值，在编程珠玑中，这个值为50左右，在数据结构与算法分析中，这个值为10。</p><p>修改如下部分：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">sort_quick</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">&lt;=</span> cutoff<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是快速排序？&quot;&gt;&lt;a href=&quot;#什么是快速排序？&quot; class=&quot;headerlink&quot; title=&quot;什么是快速排序？&quot;&gt;&lt;/a&gt;什么是快速排序？&lt;/h1&gt;&lt;p&gt;快速排序简称快排，是一种对冒泡排序改进的排序算法，通过二分的方式来对随机的数组进行递归排序，
      
    
    </summary>
    
    
      <category term="排序专题" scheme="http://hwhjl.com/categories/%E6%8E%92%E5%BA%8F%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="算法" scheme="http://hwhjl.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="http://hwhjl.com/2019/11/01/pai-xu-zhuan-ti-bing-gui-pai-xu/"/>
    <id>http://hwhjl.com/2019/11/01/pai-xu-zhuan-ti-bing-gui-pai-xu/</id>
    <published>2019-11-01T07:30:58.000Z</published>
    <updated>2020-02-22T08:16:09.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是归并排序？"><a href="#什么是归并排序？" class="headerlink" title="什么是归并排序？"></a>什么是归并排序？</h1><p>归并排序是一种通过二分的思想将序列以归并的方式来进行排序的算法。其时间复杂度为O(N log N)，空间复杂度为O( N ),从某种程度上来说，是一种以空间换时间的算法。所以对于空间较为紧缺的情况下并不适合。另外因为排序过程中会有多次的拷贝操作，可能会对排序速度造成一定的影响。所以一般情况下会采用快排的方式来实现排序。</p><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>归并排序的优点是在最坏情况下，所使用的比较次数是最优的。时间复杂度也只有O(N log N)。比其他许多算法要来得快。它最大的作用在于求逆序数，因为在同样复杂度的算法中，只有这个算法是可以在不交换的前提下获知最原始的交换次数，也就是逆序数的。</p><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>此算法的缺点是需要消耗O(N)的空间来储存归并的结果，所以虽然时间上减少了，但增加了空间上的开销。而且在频繁拷贝以及分配内存的情况下，可能会抵消时间复杂度上带来的优势。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>先考虑归并，所谓归并就是将两个已经完成排序的数列同时放进一个大的数组，放进去的时候保证按顺序放入。就是用两个游标指向这两个序列，一个游标指向存入的数组的最后面的位置。</p><p>对比两个小数列的游标指向的元素，将较小的元素存入，在某一个数列被存完之后，将另一个数列所有元素都存进大数组即可。</p><p>到这里读者可能会产生疑问，归并需要两个已经排序好的数列，但是如果已经排序好了，那为什么还需要归并呢？</p><p>这时候就需要用到二分了，所谓二分在这里就是通过将一个待排序的序列以递归的方式不断对半分，直到只有一个或两个元素时，再进行归并，只对两个元素来进行归并，那显然就是排序了。那么当底层的排序之后，再回到上一层，是不是下层已经完成了排序，那就只要对两边排序好的部分归并，那就又完成了一次排序。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>首先，需要知道，在归并过程中必然会需要有临时的空间来存放归并的结果，而这个空间如果每次需要的时候才临时分配的话，会造成极大的开销，所以需要在开始排序前就先分配好足够大的空间（N个元素的空间）</p><p>再来看归并，归并需要输入四个参数，分别是两个数组，一个顶点标记。</p><p>然后在归并中还需要三个游标，两个末尾标记,一个中间值。</p><p>在参数中，两个数组分别是待排序数组，一个是之前所说的提前分配好空间的临时存放用的数组。</p><p>顶点标记表示此层归并的元素数量。</p><p>有两个游标分别是，左边数列的游标和右边数列的游标，分别表示当前在进行归并的元素。</p><p>还有一个游标用来作为临时数组存入时，存放的位置的标记。</p><p>两个末尾标记分别是左右两个数列的游标截止的位置，用来判断归并是否结束。</p><p>中间值表示需要归并的两边元素的分界线。</p><p>归并过程很简单，就只要三个循环。</p><p>第一个循环的停机条件是有一个游标到达了末尾标记。</p><p>循环中用一个条件判断来判断左右两游标所指向的较小的那一个，然后将其存入临时数组。</p><p>再将被存入的游标和临时数组的游标都加一。</p><p>第二个循环和第三个循环相同，就只要在左/右游标还没到末尾标记时，不断将其指向的元素存入临时数组即可。</p><p>最后，将临时数组的内容复制进数组中替换原来的内容，这样就成功得完成了归并。</p><p>有了归并还不够，因为归并排序是需要二分来处理的，所以在归并之前还需要有两个递归，用来将下一层的先进行排序。</p><p>按如下操作即可。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">sortMerge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> tmp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sortMerge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sortMerge</span><span class="token punctuation">(</span>a<span class="token operator">+</span>mid<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span>n<span class="token operator">-</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">sortMerge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> tmp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sortMerge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sortMerge</span><span class="token punctuation">(</span>a<span class="token operator">+</span>mid<span class="token punctuation">,</span>tmp<span class="token punctuation">,</span>n<span class="token operator">-</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> Lend<span class="token punctuation">,</span> Rend<span class="token punctuation">;</span>        <span class="token keyword">int</span> Lpos<span class="token punctuation">,</span> Rpos<span class="token punctuation">;</span>        Lend <span class="token operator">=</span> mid<span class="token punctuation">;</span>        Rend <span class="token operator">=</span> n<span class="token punctuation">;</span>        Lpos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Rpos <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">int</span> Tpos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>Tpos <span class="token operator">&lt;</span> n<span class="token operator">&amp;&amp;</span>Lpos <span class="token operator">&lt;</span> Lend<span class="token operator">&amp;&amp;</span>Rpos <span class="token operator">&lt;</span> Rend<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>Lpos<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>Rpos<span class="token punctuation">]</span><span class="token punctuation">)</span>                tmp<span class="token punctuation">[</span>Tpos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>Lpos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                tmp<span class="token punctuation">[</span>Tpos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>Rpos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>Lpos <span class="token operator">&lt;</span> Lend<span class="token punctuation">)</span>tmp<span class="token punctuation">[</span>Tpos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>Lpos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>Rpos <span class="token operator">&lt;</span> Rend<span class="token punctuation">)</span>tmp<span class="token punctuation">[</span>Tpos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>Rpos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">sortmerge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>temp<span class="token punctuation">;</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">sortMerge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p>代码中，因为要一次性分配足够的空间，而不能每次递归时分配一遍，所以在这里单独得设置了一个sortmerge函数来将主体程序封装，并进行一些初始操作。</p><p>5、6两行代码实现了二分的操作，将要归并的两个数列先交给下一层排序完之后再在当前层进行归并。</p><p>7~13行进行了一些归并前的准备，对需要用到变量初始化。</p><p>14~22行是归并的主要操作，第一个循环判断三个游标是否都已经到底，第二第三个循环来将剩下的存入临时数组，因为判断条件只是第一个循环的拆分，所以如果游标已经到底了，会直接跳过，所以不必单独判断。</p><p>23行是将临时数组的内存块数据直接复制到原数组中，这样就省去了每次拷贝的大量消耗。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>首先要注意在排序结束之后释放临时数组。</p><p>还要注意的是在二分时仔细考虑各种情况，mid在偏向任何一边都可能会导致错误。</p><p>另外要先进行二分，后进行归并，不然的话，归并可能会提前结束，影响排序和原来的数据。</p><p>最后在归并时要注意对游标递增。</p><h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><p>以上的归并算法的改进方式之一是从递归改为迭代。</p><p>因为递归会造成O(log N)的内存浪费，虽然对已经存在的O(log N)来说微不足道，但是依然有进步空间。</p><p>还有一个可以改进的地方是，临时数组的拷贝过程。我们可以在传递给下一层时，适当得改变原数组和临时数组的地位，也就是说可以在归并的过程中直接实现拷贝，然后每一层上来都是交替原数组和临时数组。</p><p>具体来说，就是将封装函数分配的temp空间先拷贝一份原数组的内容，然后再将归并主程序中的所有临时数组和原数组相交换，并在递归到下一层的临时数组和原数组的增量都保持相同，如第六行的tmp+mid和a+mid。最后，将归并的memcpy删除。</p><p>或者将只将第5第六行的a和tmp交换，然后将在封装函数中的原数组和临时数组相交换，这样就不用改归并的过程中的tmp和a了。</p><p>第二种改进的代码如下:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">sortMerge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> tmp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sortMerge</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>a<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sortMerge</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span>mid<span class="token punctuation">,</span>a<span class="token operator">+</span>mid<span class="token punctuation">,</span>n<span class="token operator">-</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> Lend<span class="token punctuation">,</span> Rend<span class="token punctuation">;</span>        <span class="token keyword">int</span> Lpos<span class="token punctuation">,</span> Rpos<span class="token punctuation">;</span>        Lend <span class="token operator">=</span> mid<span class="token punctuation">;</span>        Rend <span class="token operator">=</span> n<span class="token punctuation">;</span>        Lpos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Rpos <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">int</span> Tpos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>Tpos <span class="token operator">&lt;</span> n<span class="token operator">&amp;&amp;</span>Lpos <span class="token operator">&lt;</span> Lend<span class="token operator">&amp;&amp;</span>Rpos <span class="token operator">&lt;</span> Rend<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>Lpos<span class="token punctuation">]</span> <span class="token operator">&lt;</span> tmp<span class="token punctuation">[</span>Rpos<span class="token punctuation">]</span><span class="token punctuation">)</span>                a<span class="token punctuation">[</span>Tpos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>Lpos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                a<span class="token punctuation">[</span>Tpos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>Rpos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>Lpos <span class="token operator">&lt;</span> Lend<span class="token punctuation">)</span>a<span class="token punctuation">[</span>Tpos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>Lpos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>Rpos <span class="token operator">&lt;</span> Rend<span class="token punctuation">)</span>a<span class="token punctuation">[</span>Tpos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>Rpos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        memcpy(a, tmp, sizeof(int)*n);</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">sort_merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>temp<span class="token punctuation">;</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sortMerge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>temp<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最后一个改进方式是拓展功能，求逆序数。</p><p>求逆序数的最重要的地方在大循环中，当放入的是右边，即较大的那边的元素时，因为理应右边的比左边的所有的都要大，所以在右边的元素放进去的时候，逆序数就要加上左边剩余元素的数量。</p><p>修改代码如下</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>Lpos<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> tmp<span class="token punctuation">[</span>Rpos<span class="token punctuation">]</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>Tpos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>Lpos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        cnt <span class="token operator">+</span><span class="token operator">=</span> Lend <span class="token operator">-</span> Lpos<span class="token punctuation">;</span>        a<span class="token punctuation">[</span>Tpos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>Rpos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp">    <span class="token keyword">int</span>  cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        cnt<span class="token operator">+</span><span class="token operator">=</span><span class="token function">sortMerge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>temp<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是归并排序？&quot;&gt;&lt;a href=&quot;#什么是归并排序？&quot; class=&quot;headerlink&quot; title=&quot;什么是归并排序？&quot;&gt;&lt;/a&gt;什么是归并排序？&lt;/h1&gt;&lt;p&gt;归并排序是一种通过二分的思想将序列以归并的方式来进行排序的算法。其时间复杂度为O(N log
      
    
    </summary>
    
    
      <category term="排序专题" scheme="http://hwhjl.com/categories/%E6%8E%92%E5%BA%8F%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="算法" scheme="http://hwhjl.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>用java实现Socket编程</title>
    <link href="http://hwhjl.com/2019/10/25/yong-java-shi-xian-socket-bian-cheng/"/>
    <id>http://hwhjl.com/2019/10/25/yong-java-shi-xian-socket-bian-cheng/</id>
    <published>2019-10-25T11:37:33.000Z</published>
    <updated>2020-02-26T04:40:10.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>Socket</code>都不陌生了，通过了复习之后，也是自己用java程序实现了<code>socket</code>的网络编程，这里分<code>TCP</code>和<code>UDP</code>两部分实现</p><ul><li>TCPServer</li><li>TCPClient</li><li>UDPServer</li><li>UDPClient</li><li>LengthCalcutator</li></ul><p>话不多说，列出代码</p><h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><h3 id="LengthCalcutator类"><a href="#LengthCalcutator类" class="headerlink" title="LengthCalcutator类"></a>LengthCalcutator类</h3><p>每当监听到了一个socket，都启动一个线程来执行相应代码，代码如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hwhjl<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LengthCalcutator</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Socket socket<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LengthCalcutator</span><span class="token punctuation">(</span>Socket socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取socket输出流</span>            OutputStream os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取socket输出流</span>            InputStream is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//读取输入内容，存成字符串</span>            ch <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将接受的byte数组转换为字符串</span>            String content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//往输入流里写入获取字符串里的长度，回发给客户端</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//不要忘记关闭资源</span>            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hwhjl<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ServerSocket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCPServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建Socket并绑定65000端口</span>        ServerSocket ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">65000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//监听65000端口，直到客户端返回连接信息后才返回</span>            Socket socket <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取客户端的请求信息后，执行相关业务逻辑</span>            <span class="token keyword">new</span> <span class="token class-name">LengthCalcutator</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hwhjl<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCPClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建socket，并且绑定本机ip和服务端端口</span>        Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">65000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取socket输入输出流</span>        OutputStream os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//写入输出流</span>        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//buff存数据，ch记录数组长度</span>        ch <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>        String content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//不要忘记关闭资源</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>我们先运行Server，让服务器处于监听状态</p><p>再执行Client代码</p><p><img src="http://img.hjl1998.cn/20200111203653.png" alt=""></p><p>服务端代码按我们的期望输出了Hello World！</p><p><img src="http://img.hjl1998.cn/20200111203645.png" alt=""></p><p>客户端也打印输出了对应字符串长度</p><p>TCP协议连接完成</p><h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><h3 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hwhjl<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>DatagramPacket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>DatagramSocket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>SocketException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//服务端接受接受客户端发送的数据包</span>        DatagramSocket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">65001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        DatagramPacket packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span>buff<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//封装到DatagramSocket对象中</span>        socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将二进制转换成字符串形式</span>        String content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将发送给客户端的数据转换成二进制</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sendedContent <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取端口和地址</span>        DatagramPacket packetToClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>sendedContent<span class="token punctuation">,</span>sendedContent<span class="token punctuation">.</span>length<span class="token punctuation">,</span>                packet<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>packet<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送数据</span>        socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packetToClient<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hwhjl<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//客户端发数据报给服务端</span>        DatagramSocket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将IP地址封装成InetAddress对象</span>        InetAddress address <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将数据封装成packet，并写入ip和端口</span>        DatagramPacket packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span>buff<span class="token punctuation">.</span>length<span class="token punctuation">,</span>address<span class="token punctuation">,</span><span class="token number">65001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送数据</span>        socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//客户端接受服务端发过来的数据</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建packte对象存储接受的数据</span>        DatagramPacket receivedPacket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将数据封装到socket中</span>        socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>receivedPacket<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印到控制台</span>        String content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>receivedPacket<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>receivedPacket<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p>同样先运行Server再运行Client</p><p>client控制台</p><p><img src="http://img.hjl1998.cn/20200111210340.png" alt=""></p><p>server</p><p><img src="http://img.hjl1998.cn/20200111210334.png" alt=""></p><p>好了，也成功输出</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然java程序给我们封装了现成的很多API，但是从编写程序的过程中，也或多或少能够感受到TCP和UDP的不一样之处，此程序供参考入门</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Socket&lt;/code&gt;都不陌生了，通过了复习之后，也是自己用java程序实现了&lt;code&gt;socket&lt;/code&gt;的网络编
      
    
    </summary>
    
    
      <category term="Java" scheme="http://hwhjl.com/categories/Java/"/>
    
    
      <category term="Socket" scheme="http://hwhjl.com/tags/Socket/"/>
    
  </entry>
  
</feed>
