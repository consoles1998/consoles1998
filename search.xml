<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>红黑树</title>
      <link href="/2020/01/01/hong-hei-shu-ru-men/"/>
      <url>/2020/01/01/hong-hei-shu-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>红黑树也许是历史上最富盛名的一种平衡二叉树。顾名思义，它和红色和黑色两种颜色有关，但是很多介绍红黑树的材料对于这个数据结构都比较形式化，不过对于其它来说，红黑树确实稍稍复杂。</p><p>下面是《算法导论》对于红黑树的定义：</p><ol><li><p>每个节点或者是红色，或者是黑色</p></li><li><p>根节点是黑色的</p></li><li><p>每一个叶子节点（最后的空节点）是黑色的</p></li><li><p>如果一个节点是红色的，那么它的孩子节点是黑色的</p></li><li><p>从任意一个节点到叶子节点，经过的黑色节点是一样的</p></li></ol><p>红黑树的形式如下图所示：</p><p><img src="http://img.hjl1998.cn/20200109153308.png" alt=""></p><h1 id="红黑树与2-3树的等价性"><a href="#红黑树与2-3树的等价性" class="headerlink" title="红黑树与2-3树的等价性"></a>红黑树与2-3树的等价性</h1><h2 id="2-3树"><a href="#2-3树" class="headerlink" title="2-3树"></a>2-3树</h2><p>我们先来介绍一下2-3树这一种数据结构</p><p>2-3树满足二分搜索树的基本特性，但是却存在两种节点</p><ol><li>一个节点存在一个值，有两个孩子</li><li>一个节点存在两个值，有三个孩子</li></ol><p>这就是2-3树名字的由来，但是如果有三个孩子，为什么说它满足二分搜索树的基本特性的，因为我们知道二分搜索树是一颗二叉树，这和2-3树第二种节点的定义不是矛盾了么？</p><p>其实我们说2-3树满足二分搜索树的基本特性，是根据孩子的分类来的，2-3树的第二种节点的两个值中，三个孩子分别为：比较小的值小，比较大的值大以及处于两个值的中间的数值。这样我们不难理解，2-3树为什么满足二分搜索树的基本特性了。</p><p>除此之外，2-3树还有一个特性，就是<font color = #FF0000>2-3树是绝对平衡的</font>，也就是说，它从根节点到任意叶子节点，路径长度相同。</p><p>如图所示是一颗基本的2-3树</p><p><img src="http://img.hjl1998.cn/20200109154709.png" alt=""></p><h2 id="红黑树与2-3树的联系"><a href="#红黑树与2-3树的联系" class="headerlink" title="红黑树与2-3树的联系"></a>红黑树与2-3树的联系</h2><p>那么为什么说红黑树和2-3树是等价的呢</p><p>我们可以做一些类比，如下图</p><p><img src="http://img.hjl1998.cn/20200110124525.png" alt=""></p><p>2节点，我们可以类比红黑树的黑色单个节点</p><p>3节点，小的值我们可以类比红黑树左孩子，并且用红色标识</p><p>基于这个概念，我们就可以把上面的2-3树构建出一颗红黑树</p><p><img src="http://img.hjl1998.cn/20200110115842.png" alt=""></p><p>因为2-3树是绝对平衡的，所以在2-3树中，从根节点到叶子节点路径长度都一样</p><p>这样我们就不难理解，为什么红黑树<font color=#FF0000>从任意一个节点到叶子节点，经过的黑色节点是一样的</font>,那是因为所有的红色节点都被看做和父亲节点一起，相当于2-3树中的3节点</p><p>如果还不明白，可以把红色节点横过来</p><p><img src="http://img.hjl1998.cn/20200110124650.png" alt=""></p><p>是不是豁然开朗</p><p>而紧接着，红黑树的剩下四个性质都不难推倒出来了，这就是红黑树和2-3树的联系，它们是等价的</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="首先是红黑树的构建"><a href="#首先是红黑树的构建" class="headerlink" title="首先是红黑树的构建"></a>首先是红黑树的构建</h2><p>构建红黑树，与二分搜索树类似，不同的是红黑树多了<code>color</code>这个成员变量，来标志节点的颜色</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RBTree</span><span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>K<span class="token operator">></span><span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> RED <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> BLACK <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> K key<span class="token punctuation">;</span>        <span class="token keyword">public</span> V value<span class="token punctuation">;</span>        <span class="token keyword">public</span> Node left<span class="token punctuation">,</span>right<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> color<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Node</span> <span class="token punctuation">(</span>K key<span class="token punctuation">,</span>V value<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token operator">=</span>key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            left <span class="token operator">=</span> null<span class="token punctuation">;</span>            right <span class="token operator">=</span> null<span class="token punctuation">;</span>            color <span class="token operator">=</span> RED<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node root<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RBTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        root <span class="token operator">=</span> null<span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isRed</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> BLACK<span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>color<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h2><p>分析红黑树添加节点的情况</p><p>第一种</p><p>插入的是黑色节点的左边，我们直接插入即可</p><p>第二种</p><p>插入的是黑色节点的右边，但黑色节点没有左孩子，我们就对该黑色节点进行左旋转</p><p>第三种</p><p>插入的是黑色节点的右边，但是黑色节点有左孩子，我们只要对黑色节点和两个孩子节点进行颜色反转</p><p>第四种</p><p>插入的是黑色节点的左红孩子的左孩子，那么我们就对该黑色节点进行右旋转</p><p>第五种</p><p>插入的是黑色节点的左红孩子的右孩子，我们先对黑色节点的左孩子进行左旋转，然后对黑色节点进行右旋转</p><p><img src="http://img.hjl1998.cn/20200110142926.png" alt=""></p><p>所以我们所需要三种辅助方法，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//左旋转</span>    <span class="token keyword">private</span> Node <span class="token function">leftRotate</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span><span class="token punctuation">{</span>        Node x <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>right <span class="token operator">=</span> x<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>color <span class="token operator">=</span> node<span class="token punctuation">.</span>color<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//颜色反转</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">flipColor</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span><span class="token punctuation">{</span>        node<span class="token punctuation">.</span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//右旋转</span>    <span class="token keyword">private</span> Node <span class="token function">rightRotate</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span><span class="token punctuation">{</span>        Node x <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>left <span class="token operator">=</span> x<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>color <span class="token operator">=</span> node<span class="token punctuation">.</span>color<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><p>我们已经分析了添加节点的五种情况，那我们就可以根据这五种情况来编写<code>add</code>方法</p><p>先看代码</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//往红黑树中添加一个节点</span>    <span class="token keyword">private</span> Node <span class="token function">add</span><span class="token punctuation">(</span>Node node<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            size<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isRed</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>            node <span class="token operator">=</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRed</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>            node <span class="token operator">=</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRed</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">flipColor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>在二分搜索树的基础上，我们在每次递归中加入节点维护，进行相应的操作</p><p>由此，红黑树的添加操作就终于完成了</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>对于红黑树的添加，我们看到子过程十分复杂，其中我们进行了很多步的分类讨论</p><p>其实对于红黑树的删除，比红黑树的添加更加复杂，这里就不过多的深入了</p><p>（我也是入门，根本不会hhh）</p><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p>其实对于我们上述实现的红黑树，更确切的叫法可以叫左倾红黑树，顾名思义，就是它所有红色节点都是黑色节点的左孩子，这只是红黑树的实现方式的一种，还有其他的比如右倾红黑树这种实现方式。</p><p>相比于AVL树来说，红黑树之所以用的多，是因为红黑树是一种统计性能更优的数据结构，而对于删除添加，对比AVL树并没有很大的优势。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的用java做一个爬虫</title>
      <link href="/2019/12/21/jian-dan-de-yong-java-zuo-yi-ge-pa-chong/"/>
      <url>/2019/12/21/jian-dan-de-yong-java-zuo-yi-ge-pa-chong/</url>
      
        <content type="html"><![CDATA[<h1 id="网络爬虫是什么"><a href="#网络爬虫是什么" class="headerlink" title="网络爬虫是什么"></a>网络爬虫是什么</h1><p>​    网络爬虫（又称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫 。<br>​    简而言之，网络爬虫就是帮助我们访问网络上的资源，我们一直以来都是用http协议访问互联网的网页，网络爬虫需要编写程序，我们这里同样用http协议访问网页。<br>​    这里我们用java的HTTP协议客户端<code>HttpClient</code>这个技术，来实现抓取网页数据。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>jdk 1.8</p><p>IDEA</p><p>Maven</p><h1 id="写一个入门程序"><a href="#写一个入门程序" class="headerlink" title="写一个入门程序"></a>写一个入门程序</h1><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><p>第一步，我们需要从maven仓库中找到<code>HttpClient</code>这个包，pom文件如下添加</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>然后我们先写一个入门小程序，比如让<code>url</code>指向<code>www.taobao.com</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建HttpClient对象</span>        CloseableHttpClient httpClient <span class="token operator">=</span> HttpClients<span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.输入网址，发起Get请求创建HttpGet对象</span>        HttpGet httpGet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpGet</span><span class="token punctuation">(</span><span class="token string">"http://www.taobao.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.按回车，发起请求并返回响应</span>        CloseableHttpResponse response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpGet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.解析请求，如果状态码是200则输入响应实体</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            HttpEntity httpEntity <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String content <span class="token operator">=</span> EntityUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>httpEntity<span class="token punctuation">,</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>运行程序，观察控制台，打印出了完整的返回数据，很容易看出这是个html网页</p><p><img src="http://img.hjl1998.cn/%E6%B7%98%E5%AE%9D.png" alt=""></p><p>实际上这就是我们模拟了http协议向淘宝发送了请求，返回给我们的一个完整的网页</p><h1 id="请求传参"><a href="#请求传参" class="headerlink" title="请求传参"></a>请求传参</h1><p>​        我们发现，我们可以很轻易的使用<code>httpclient</code>来进行网页的访问，但是，我们写的入门代码有一定的局限性，比如下面这个例子，我们发现在虎牙搜索的时候，地址栏里会传入我们搜索的参数，我们怎么才能在访问的时候附带我们的参数呢</p><p><img src="http://img.hjl1998.cn/20200103172046.png" alt=""></p><p>其实很简单，我们只要用到<code>URIBuilder</code>这个对象来帮我们</p><p>代码如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> URISyntaxException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建Httpclient对象</span>        CloseableHttpClient httpClient <span class="token operator">=</span> HttpClients<span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建URIBuilder</span>        URIBuilder uriBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URIBuilder</span><span class="token punctuation">(</span><span class="token string">"http://huya.com/search"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置参数</span>        uriBuilder<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token string">"hsk"</span><span class="token punctuation">,</span><span class="token string">"骚男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建HttpGet对象,传入带参URI</span>        HttpGet httpGet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpGet</span><span class="token punctuation">(</span>uriBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用HttpClient对象发送请求，获取response对象</span>        CloseableHttpResponse response <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpGet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//解析响应</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                String content <span class="token operator">=</span> EntityUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                response<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                httpClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>当我们的参数有多个的时候，我们也可以用多个<code>uriBuilder.setParameter(&quot;键&quot;,&quot;值&quot;);</code>来设置参数</p><h1 id="改用Post请求"><a href="#改用Post请求" class="headerlink" title="改用Post请求"></a>改用Post请求</h1><h2 id="入门程序修改"><a href="#入门程序修改" class="headerlink" title="入门程序修改"></a>入门程序修改</h2><p>这个时候有很多小伙伴会问了，怎么让客户端发送Post请求而不是Get呢</p><p>其实这个很简单，只要把入门代码中的<code>HttpGet</code>全部改成<code>HttpPost</code>就OK了</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建HttpPost对象,传入带参URI</span>HttpPost httpPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span>uriBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="带参数的Post请求"><a href="#带参数的Post请求" class="headerlink" title="带参数的Post请求"></a>带参数的Post请求</h2><p>想让Post请求带参数，我们就得先声明一个List封装键值对</p><p>代码如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> URISyntaxException<span class="token punctuation">,</span> UnsupportedEncodingException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建Httpclient对象</span>        CloseableHttpClient httpClient <span class="token operator">=</span> HttpClients<span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建HttpGet对象,传入URL</span>        HttpPost httpPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span><span class="token string">"http://huya.com/search"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//声明List集合，封装元素</span>        List<span class="token operator">&lt;</span>NameValuePair<span class="token operator">></span>  params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>NameValuePair<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicNameValuePair</span><span class="token punctuation">(</span><span class="token string">"hsk"</span><span class="token punctuation">,</span><span class="token string">"骚男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建表单Entity对象</span>        UrlEncodedFormEntity formEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlEncodedFormEntity</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把Entity对象封装到HttpPost中</span>        httpPost<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>formEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//使用HttpClient对象发送请求，获取response对象</span>        CloseableHttpResponse response <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpPost<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//解析响应</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                String content <span class="token operator">=</span> EntityUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                response<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                httpClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h1 id="进一步"><a href="#进一步" class="headerlink" title="进一步"></a>进一步</h1><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><p>如果每次请求都要创建HttpClient，那么会造成频繁的创建和销毁的问题，那细心的你肯定想到了，连接池技术</p><p>就像java的jdbc连接池一样，利用连接池来减少创建销毁的次数来保证程序的效率更高，这里我们用到了<code>PoolingHttpClientConnectionManager</code>这个类</p><p>完整代码如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hwhjl<span class="token punctuation">.</span>crawler<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpEntity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span>CloseableHttpResponse<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span>HttpGet<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>client<span class="token punctuation">.</span>CloseableHttpClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>client<span class="token punctuation">.</span>HttpClients<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>PoolingHttpClientConnectionManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EntityUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpClientPoolTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建连接池管理器</span>        PoolingHttpClientConnectionManager cm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PoolingHttpClientConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用连接池管理器发起请求</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>cm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>PoolingHttpClientConnectionManager cm<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//从连接池获取httpClient对象</span>        CloseableHttpClient httpClient <span class="token operator">=</span> HttpClients<span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setConnectionManager</span><span class="token punctuation">(</span>cm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输入网址，发起Get请求创建HttpGet对象</span>        HttpGet httpGet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpGet</span><span class="token punctuation">(</span><span class="token string">"http://www.taobao.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//按回车，发起请求并返回响应</span>        CloseableHttpResponse response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpGet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解析请求，如果状态码是200则输入响应实体</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            HttpEntity httpEntity <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String content <span class="token operator">=</span> EntityUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>httpEntity<span class="token punctuation">,</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        response<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>相信通过上述代码的编写，对java写一个小爬虫就有了初步的认识</p><p>其实用java写爬虫咱么可以借助很多第三方包，比如最常见的<code>jsoup</code></p><p>对于爬虫的进一步学习，可以从jsoup开始</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎搞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trie字典树</title>
      <link href="/2019/11/18/trie-zi-dian-shu/"/>
      <url>/2019/11/18/trie-zi-dian-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p> 又称字典树，Trie树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="构建一颗字典树"><a href="#构建一颗字典树" class="headerlink" title="构建一颗字典树"></a>构建一颗字典树</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hwhjl<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>trie<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>TreeMap<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> isWord<span class="token punctuation">;</span>        <span class="token keyword">public</span> TreeMap<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span>Node<span class="token operator">></span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isWord<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>isWord<span class="token operator">=</span>isWord<span class="token punctuation">;</span>            next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node root<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        root<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回存储单词的数量</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="在字典树中添加单词"><a href="#在字典树中添加单词" class="headerlink" title="在字典树中添加单词"></a>在字典树中添加单词</h2><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//添加一个单词</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span><span class="token punctuation">{</span>        Node cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">.</span>isWord<span class="token punctuation">)</span><span class="token punctuation">{</span>            cur<span class="token punctuation">.</span>isWord<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            size<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="从字典树中查询单词"><a href="#从字典树中查询单词" class="headerlink" title="从字典树中查询单词"></a>从字典树中查询单词</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//查询一个单词是否在树中</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span><span class="token punctuation">{</span>        Node cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cur<span class="token punctuation">.</span>isWord<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="前缀搜索"><a href="#前缀搜索" class="headerlink" title="前缀搜索"></a>前缀搜索</h2><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//前缀查询</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPrefix</span><span class="token punctuation">(</span>String prefix<span class="token punctuation">)</span><span class="token punctuation">{</span>        Node cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>prefix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>因为所有的单词本身就是自己的前缀，所以Trie也叫前缀树</p><h1 id="模糊匹配"><a href="#模糊匹配" class="headerlink" title="模糊匹配"></a>模糊匹配</h1><p>我们假设一个字符串中，‘.’代表的是匹配任意字符，那我们可以设计该方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//模糊匹配（.可以代表任意字母）</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">match</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>word<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">match</span><span class="token punctuation">(</span>Node node<span class="token punctuation">,</span> String word<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>isWord<span class="token punctuation">;</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">match</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>word<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> nextChar<span class="token operator">:</span>node<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">match</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nextChar<span class="token punctuation">)</span><span class="token punctuation">,</span>word<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>字典树的好处在于，它不在乎数据条目的多少，不管有多大的数据量，它只和传入的参数的长度有关，对于有规则的参数表现形式，比如英文单词，字典树可以大大提升其查找效率。</p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda expression are not supported at language level &#39;5&#39;</title>
      <link href="/2019/11/17/lambda-expression-are-not-supported-at-language-level-5/"/>
      <url>/2019/11/17/lambda-expression-are-not-supported-at-language-level-5/</url>
      
        <content type="html"><![CDATA[<h1 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息:"></a>错误信息:</h1><h3 id="Lambda-expression-are-not-supported-at-language-level-‘5’"><a href="#Lambda-expression-are-not-supported-at-language-level-‘5’" class="headerlink" title="Lambda expression are not supported at language level ‘5’"></a>Lambda expression are not supported at language level ‘5’</h3><h3 id="Error-28-39-java-source-1-5-中不支持-lambda-表达式"><a href="#Error-28-39-java-source-1-5-中不支持-lambda-表达式" class="headerlink" title="Error:(28, 39) java: -source 1.5 中不支持 lambda 表达式"></a>Error:(28, 39) java: -source 1.5 中不支持 lambda 表达式</h3><h1 id="解决方式："><a href="#解决方式：" class="headerlink" title="解决方式："></a>解决方式：</h1><p>在IDEA中编译运行程序，除了可以指定编译的JDK版本外，还可以指定编译的Language Level。如果指定的Language Level选择不正确，即使使用的是java正确对应版本，在编译程序的时候还是会可能发生程序编译错误。</p><p>上面的错误是lambda表达式语言特性在Language Level 5下是不支持。这需要我们将Language Level调整到8.</p><p><font color=#FF0000>  具体操作如下：</font>  </p><p>点击File|Project Structure..或者使用快捷键Ctrl+Alt+Shift+S调整项目结构设置。</p><p><img src="http://img.hjl1998.cn/20200106192334.png" alt=""></p><p> 将Sources中Language Level 由级别5调整到级别8. </p><p><img src="http://img.hjl1998.cn/20200106192316.png" alt=""></p><p> 如果Language Level没有级别8的支持Lambda表达式的选项，请设置工程编译SDK为1.8+，当然你前提是需要安装JDK1.8哦，并已经设置好环境变量等。 </p><p><img src="http://img.hjl1998.cn/20200106193319.png" alt=""></p><h1 id="错误信息-1"><a href="#错误信息-1" class="headerlink" title="错误信息:"></a>错误信息:</h1><h3 id="Error-java-Compilation-failed-internal-java-compiler-error"><a href="#Error-java-Compilation-failed-internal-java-compiler-error" class="headerlink" title="Error:java: Compilation failed: internal java compiler error"></a>Error:java: Compilation failed: internal java compiler error</h3><h1 id="解决方式：-1"><a href="#解决方式：-1" class="headerlink" title="解决方式："></a>解决方式：</h1><p> 解决办法很简单：File–&gt;Setting…–&gt;Build,Execution,Deployment–&gt;Compiler–&gt;Java Compiler 设置相应Module的target bytecode version的合适版本（跟你jkd版本一致），这里我改成1.8版本的。 </p><h3 id="大功告成，继续Happy你的Lambda表达式吧"><a href="#大功告成，继续Happy你的Lambda表达式吧" class="headerlink" title=" 大功告成，继续Happy你的Lambda表达式吧"></a><font color=#FF0000> 大功告成，继续Happy你的Lambda表达式吧</font></h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杀bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树入门笔记</title>
      <link href="/2019/11/16/xian-duan-shu/"/>
      <url>/2019/11/16/xian-duan-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​        细数着大三也就过去了大半，想想前两年过的大学，懊悔不已，当初为什么不好好学习，在考研和就业两条路上斟酌了很久，最后还是选择了就业，听学长说大三下学期的春招可以试试，怀着一腔热血和悔恨，决定还是从基础看起，既然身为程序员，基本的数据结构知识储备还是必不可少的，那么废话不多说，数据结构系列走起。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>​        线段树，是一种二叉搜索树，顾名思义，是对一段数据进行操作的树，它将区间划分成一些单元区间，每个单元区间对应线段树中的一个叶子节点。经典的线段树例题<code>区间染色</code>、<code>区间查询</code>。</p><h1 id="区间的一般操作"><a href="#区间的一般操作" class="headerlink" title="区间的一般操作"></a>区间的一般操作</h1><p>一般来说，区间的长度一般都是确定的，所以对于区间的<code>添加</code>和<code>删除</code>操作我们一般不考虑，所以对于线段树，着重研究它的<code>更新</code>和<code>查询</code>两个操作，对于复杂度，线段树将一般区间操作的O(N)降低到了O(logN)</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h3 id="线段树的形式"><a href="#线段树的形式" class="headerlink" title="线段树的形式"></a>线段树的形式</h3><p>以求和为例，分层级表示一段区间内的和，每个节点表示不同区间的和</p><p><img src="http://img.hjl1998.cn/20200106180921.png" alt=""></p><p>上述为8个元素的线段树，而8这个元素比较特殊，刚好是2的3次。其实线段树不一定是完全二叉树，也不一定是满二叉树，如下图10个元素</p><p><img src="http://img.hjl1998.cn/20200106181904.png" alt=""></p><p>但是线段树一定是平衡二叉树(深度最大和最小差小于等于1)</p><h3 id="如何把N个元素表示成一颗线段树"><a href="#如何把N个元素表示成一颗线段树" class="headerlink" title="如何把N个元素表示成一颗线段树"></a>如何把N个元素表示成一颗线段树</h3><p>我们可以用<code>数组</code>存储线段树的节点</p><p>而对于数组长度n，我们有以下原则</p><p>最好情况：当<code>N = 2^k</code> ，则n取2N，为满二叉树</p><p>最坏情况：当<code>N=2^k+1</code>，则n取4N，会造成一定的空间浪费</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>对于基本的线段树，代码如下 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SegmentTree</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> E<span class="token punctuation">[</span><span class="token punctuation">]</span> tree<span class="token punctuation">;</span>    <span class="token keyword">private</span> E<span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> Merger<span class="token operator">&lt;</span>E<span class="token operator">></span> merger<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化线段树</span>    <span class="token keyword">public</span> <span class="token function">SegmentTree</span><span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span>Merger<span class="token operator">&lt;</span>E<span class="token operator">></span> merger<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>merger <span class="token operator">=</span> merger<span class="token punctuation">;</span>        data <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tree <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span>data<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">buildSegmentTree</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在区间treeIndex的位置创建表示[l，r]的线段树</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">buildSegmentTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> treeIndex<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            tree<span class="token punctuation">[</span>treeIndex<span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> leftTreeIndex <span class="token operator">=</span> <span class="token function">leftChild</span><span class="token punctuation">(</span>treeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> rightTreeIndex <span class="token operator">=</span> <span class="token function">rightChild</span><span class="token punctuation">(</span>treeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止溢出</span>            <span class="token function">buildSegmentTree</span><span class="token punctuation">(</span>leftTreeIndex<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">buildSegmentTree</span><span class="token punctuation">(</span>rightTreeIndex<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            tree<span class="token punctuation">[</span>treeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> merger<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>leftTreeIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>rightTreeIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取区间长度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取对应节点的值</span>    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>index<span class="token operator">></span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Index is Illegal."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回左孩子的节点索引</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">leftChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回右孩子的节点索引</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rightChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>index<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        StringBuilder res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>tree<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">!=</span>tree<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><font color=#FF0000>这里写一个接口，自定义此线段树结合方式</font></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Merger</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> E <span class="token function">merge</span><span class="token punctuation">(</span>E a<span class="token punctuation">,</span> E b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><font color=#FF0000>Main方法测试</font></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        SegmentTree<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SegmentTree</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果如下</p><pre class=" language-java"><code class="language-java">D<span class="token operator">:</span>\JAVA\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_131\bin\java<span class="token punctuation">.</span>exe<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">]</span>Process finished with exit code <span class="token number">0</span></code></pre><p>线段树的构造是不是简单的一批。</p><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p>查询操作得分情况考虑</p><p>考虑用递归简化代码</p><p>代码如下</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//返回[L，R]区间的值</span>    <span class="token keyword">public</span> E <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>L<span class="token operator">>=</span>data<span class="token punctuation">.</span>length<span class="token operator">||</span>R<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>R<span class="token operator">>=</span>data<span class="token punctuation">.</span>length<span class="token operator">||</span>R<span class="token operator">&lt;</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Index is illega."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>L<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//搜索在以treeIndex为根的线段树中[l,r]的范围里，搜索区间[L，R]的值</span>    <span class="token keyword">public</span> E <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> treeIndex<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>L<span class="token operator">&amp;&amp;</span>R<span class="token operator">==</span>r<span class="token punctuation">)</span>            <span class="token keyword">return</span> tree<span class="token punctuation">[</span>treeIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> leftTreeIndex <span class="token operator">=</span> <span class="token function">leftChild</span><span class="token punctuation">(</span>treeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rightTreeIndex <span class="token operator">=</span> <span class="token function">rightChild</span><span class="token punctuation">(</span>treeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>R<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>leftTreeIndex<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>L<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">>=</span>mid<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>rightTreeIndex<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>L<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>        E leftResult <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>leftTreeIndex<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>L<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        E rightResult <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>rightTreeIndex<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> merger<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>leftResult<span class="token punctuation">,</span>rightResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>时间复杂度为O(logN)级别，高效又简单。</p><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p>更新操作要注意的一点是一旦叶子节点更新了，那么它的祖辈节点都需要更新操作</p><p>也是通过递归代码实现</p><p>代码如下</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//更新index索引位置为e</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span>E e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>index<span class="token operator">>=</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Index is illega."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>        <span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>index<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> treeIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">,</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            tree<span class="token punctuation">[</span>treeIndex<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> leftTreeIndex <span class="token operator">=</span> <span class="token function">leftChild</span><span class="token punctuation">(</span>treeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rightTreeIndex <span class="token operator">=</span> <span class="token function">rightChild</span><span class="token punctuation">(</span>treeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>            <span class="token function">set</span><span class="token punctuation">(</span>leftTreeIndex<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>index<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//index>mid</span>            <span class="token function">set</span> <span class="token punctuation">(</span>rightTreeIndex<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>index<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>treeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> merger<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>leftTreeIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>rightTreeIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>完成，基于线段树的两大基本操作原理。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
